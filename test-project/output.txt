Build profile: -w ghc-9.0.2 -O1
In order, the following will be built (use -v for more details):
 - test-project-0.1.0.0 (exe:hs-plugin-test) (file app/Tree.hs changed)
Preprocessing executable 'hs-plugin-test' for test-project-0.1.0.0..
Building executable 'hs-plugin-test' for test-project-0.1.0.0..
[ 1 of 11] Skipping  Channable        ( app/Channable.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Channable.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Channable.dyn_o )
[ 2 of 11] Skipping  Factorial        ( app/Factorial.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Factorial.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Factorial.dyn_o )
[ 3 of 11] Skipping  Peano            ( app/Peano.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Peano.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Peano.dyn_o )
[ 4 of 11] Skipping  Quicksort        ( app/Quicksort.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Quicksort.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Quicksort.dyn_o )
[ 5 of 11] Skipping  Streaming        ( app/Streaming.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Streaming.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Streaming.dyn_o )
[ 6 of 11] Skipping  Text             ( app/Text.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Text.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Text.dyn_o )
[ 7 of 11] Skipping  Typeclass        ( app/Typeclass.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Typeclass.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Typeclass.dyn_o )
[ 8 of 11] Skipping  Unlines          ( app/Unlines.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Unlines.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Unlines.dyn_o )
[ 9 of 11] Compiling Tree             ( app/Tree.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Tree.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Tree.dyn_o )

==================== Desugar (before optimization) ====================
Result size of Desugar (before optimization)
  = {terms: 201, types: 202, coercions: 0, joins: 0/10}

Rec {
-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dShow_ab61 :: Show Int
[LclId]
$dShow_ab61 = $dShow_ab5U

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dShow_ab5U :: Show Int
[LclId]
$dShow_ab5U = GHC.Show.$fShowInt

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      (ghc-prim-0.7.0:GHC.Types.TrNameS "Tree"#)
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      (ghc-prim-0.7.0:GHC.Types.TrNameS "'Leaf"#)
      1#
      $krep_ab7x

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      (ghc-prim-0.7.0:GHC.Types.TrNameS "'Node"#)
      1#
      $krep_ab7A

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7y
  = ghc-prim-0.7.0:GHC.Types.$WKindRepVar
      (ghc-prim-0.7.0:GHC.Types.I# 0#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp
      Tree.$tcTree
      (ghc-prim-0.7.0:GHC.Types.:
         @ghc-prim-0.7.0:GHC.Types.KindRep
         $krep_ab7y
         (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep))

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module
      (ghc-prim-0.7.0:GHC.Types.TrNameS "main"#)
      (ghc-prim-0.7.0:GHC.Types.TrNameS "Tree"#)

-- RHS size: {terms: 31, types: 35, coercions: 0, joins: 0/1}
mapTree [InlPrag=NOINLINE]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      let {
        f_aaiM :: a_ab5r -> b_ab5s
        [LclId]
        f_aaiM = f_aaiK } in
      case ds_db7E of wild_00 {
        Leaf x_aaiL ->
          (\ (@a_aa5j) (ds_db7J :: a_aa5j) -> Tree.Leaf @a_aa5j ds_db7J)
            @b_ab5s
            (f_aaiK
               (trace
                  @a_ab5r
                  (ghc-prim-0.7.0:GHC.CString.unpackCString# "ping"#)
                  x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          (\ (@a_aa5j) (ds_db8g :: Tree a_aa5j) (ds_db8h :: Tree a_aa5j) ->
             Tree.Node @a_aa5j ds_db8g ds_db8h)
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiM lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiM rhs_aaiO)
      }

-- RHS size: {terms: 12, types: 20, coercions: 0, joins: 0/1}
makeImportant :: Tree Int -> Tree String
[LclIdX]
makeImportant
  = . @(Tree [Char])
      @(Tree [Char])
      @(Tree Int)
      (mapTree
         @[Char]
         @[Char]
         (let {
            ds_db8p :: [Char]
            [LclId]
            ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# "!"# } in
          \ (ds_db8o :: [Char]) -> ++ @Char ds_db8o ds_db8p))
      (mapTree @Int @String (show @Int $dShow_ab5U))

-- RHS size: {terms: 10, types: 8, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) ->
      mapTree
        @Int
        @[Char]
        (\ (x_aaiQ :: Int) ->
           ++
             @Char
             (show @Int $dShow_ab61 x_aaiQ)
             (ghc-prim-0.7.0:GHC.CString.unpackCString# "!"#))
        ts_aaiP

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 59, types: 47, coercions: 0, joins: 0/6}
$cshowsPrec_ab65 :: forall a. Show a => Int -> Tree a -> ShowS
[LclId]
$cshowsPrec_ab65
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      let {
        $dShow_ab6s :: Show (Tree a_ab62)
        [LclId]
        $dShow_ab6s = Tree.$fShowTree @a_ab62 $dShow_ab63 } in
      let {
        $dShow_ab6x :: Show (Tree a_ab62)
        [LclId]
        $dShow_ab6x = $dShow_ab6s } in
      let {
        $dShow_ab6h :: Show a_ab62
        [LclId]
        $dShow_ab6h = $dShow_ab63 } in
      let {
        $dOrd_ab6c :: Ord Int
        [LclId]
        $dOrd_ab6c = ghc-prim-0.7.0:GHC.Classes.$fOrdInt } in
      let {
        $dOrd_ab6k :: Ord Int
        [LclId]
        $dOrd_ab6k = $dOrd_ab6c } in
      \ (a_ab4Q :: Int) (ds_db8q :: Tree a_ab62) ->
        let {
          a_ab4S :: Int
          [LclId]
          a_ab4S = a_ab4Q } in
        case ds_db8q of wild_00 {
          Leaf b1_ab4R ->
            showParen
              (>= @Int $dOrd_ab6c a_ab4Q (ghc-prim-0.7.0:GHC.Types.I# 11#))
              (. @String
                 @String
                 @String
                 (showString (ghc-prim-0.7.0:GHC.CString.unpackCString# "Leaf "#))
                 (showsPrec
                    @a_ab62 $dShow_ab6h (ghc-prim-0.7.0:GHC.Types.I# 11#) b1_ab4R));
          Node b1_ab4T b2_ab4U ->
            showParen
              (>= @Int $dOrd_ab6k a_ab4S (ghc-prim-0.7.0:GHC.Types.I# 11#))
              (. @String
                 @String
                 @String
                 (showString (ghc-prim-0.7.0:GHC.CString.unpackCString# "Node "#))
                 (. @String
                    @String
                    @String
                    (showsPrec
                       @(Tree a_ab62)
                       $dShow_ab6s
                       (ghc-prim-0.7.0:GHC.Types.I# 11#)
                       b1_ab4T)
                    (. @String
                       @String
                       @String
                       GHC.Show.showSpace
                       (showsPrec
                          @(Tree a_ab62)
                          $dShow_ab6x
                          (ghc-prim-0.7.0:GHC.Types.I# 11#)
                          b2_ab4U))))
        }

-- RHS size: {terms: 7, types: 10, coercions: 0, joins: 0/1}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId]
$cshow_ab6A
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      let {
        $dShow_ab6E :: Show (Tree a_ab62)
        [LclId]
        $dShow_ab6E = Tree.$fShowTree @a_ab62 $dShow_ab63 } in
      GHC.Show.$dmshow @(Tree a_ab62) $dShow_ab6E

-- RHS size: {terms: 7, types: 10, coercions: 0, joins: 0/1}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId]
$cshowList_ab6H
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      let {
        $dShow_ab6L :: Show (Tree a_ab62)
        [LclId]
        $dShow_ab6L = Tree.$fShowTree @a_ab62 $dShow_ab63 } in
      GHC.Show.$dmshowList @(Tree a_ab62) $dShow_ab6L
end Rec }


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Desugar (after optimization) ====================
Result size of Desugar (after optimization)
  = {terms: 173, types: 169, coercions: 0, joins: 0/2}

Rec {
-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
$cshow_ab6A [Occ=LoopBreaker]
  :: forall a. Show a => Tree a -> String
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 40 60}]
$cshow_ab6A
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.$dmshow
        @(Tree a_ab62) (Tree.$fShowTree @a_ab62 $dShow_ab63)

-- RHS size: {terms: 5, types: 7, coercions: 0, joins: 0/0}
$cshowList_ab6H [Occ=LoopBreaker]
  :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 40 60}]
$cshowList_ab6H
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.$dmshowList
        @(Tree a_ab62) (Tree.$fShowTree @a_ab62 $dShow_ab63)

-- RHS size: {terms: 49, types: 37, coercions: 0, joins: 0/1}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 640 60}]
$cshowsPrec_ab65
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      let {
        $dShow_ab6s :: Show (Tree a_ab62)
        [LclId,
         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                 WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
        $dShow_ab6s = Tree.$fShowTree @a_ab62 $dShow_ab63 } in
      \ (a_ab4Q :: Int) (ds_db8q :: Tree a_ab62) ->
        case ds_db8q of {
          Leaf b1_ab4R ->
            showParen
              (>=
                 @Int
                 ghc-prim-0.7.0:GHC.Classes.$fOrdInt
                 a_ab4Q
                 (ghc-prim-0.7.0:GHC.Types.I# 11#))
              (. @String
                 @String
                 @String
                 (showString (ghc-prim-0.7.0:GHC.CString.unpackCString# "Leaf "#))
                 (showsPrec
                    @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b1_ab4R));
          Node b1_ab4T b2_ab4U ->
            showParen
              (>=
                 @Int
                 ghc-prim-0.7.0:GHC.Classes.$fOrdInt
                 a_ab4Q
                 (ghc-prim-0.7.0:GHC.Types.I# 11#))
              (. @String
                 @String
                 @String
                 (showString (ghc-prim-0.7.0:GHC.CString.unpackCString# "Node "#))
                 (. @String
                    @String
                    @String
                    (showsPrec
                       @(Tree a_ab62)
                       $dShow_ab6s
                       (ghc-prim-0.7.0:GHC.Types.I# 11#)
                       b1_ab4T)
                    (. @String
                       @String
                       @String
                       GHC.Show.showSpace
                       (showsPrec
                          @(Tree a_ab62)
                          $dShow_ab6s
                          (ghc-prim-0.7.0:GHC.Types.I# 11#)
                          b2_ab4U))))
        }
end Rec }

Rec {
-- RHS size: {terms: 21, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 100] 190 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf
            @b_ab5s
            (f_aaiK
               (trace
                  @a_ab5r
                  (ghc-prim-0.7.0:GHC.CString.unpackCString# "ping"#)
                  x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module
      (ghc-prim-0.7.0:GHC.Types.TrNameS "main"#)
      (ghc-prim-0.7.0:GHC.Types.TrNameS "Tree"#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$krep_ab7y
  = ghc-prim-0.7.0:GHC.Types.$WKindRepVar
      (ghc-prim-0.7.0:GHC.Types.I# 0#)

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      (ghc-prim-0.7.0:GHC.Types.TrNameS "Tree"#)
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp
      Tree.$tcTree
      (ghc-prim-0.7.0:GHC.Types.:
         @ghc-prim-0.7.0:GHC.Types.KindRep
         $krep_ab7y
         (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      (ghc-prim-0.7.0:GHC.Types.TrNameS "'Leaf"#)
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      (ghc-prim-0.7.0:GHC.Types.TrNameS "'Node"#)
      1#
      $krep_ab7A

-- RHS size: {terms: 12, types: 20, coercions: 0, joins: 0/1}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 180 60}]
makeImportant
  = . @(Tree [Char])
      @(Tree [Char])
      @(Tree Int)
      (mapTree
         @[Char]
         @[Char]
         (let {
            ds_db8p :: [Char]
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                     WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 40 0}]
            ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# "!"# } in
          \ (ds_db8o :: [Char]) -> ++ @Char ds_db8o ds_db8p))
      (mapTree @Int @String (show @Int GHC.Show.$fShowInt))

-- RHS size: {terms: 10, types: 8, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 140 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) ->
      mapTree
        @Int
        @[Char]
        (\ (x_aaiQ :: Int) ->
           ++
             @Char
             (show @Int GHC.Show.$fShowInt x_aaiQ)
             (ghc-prim-0.7.0:GHC.CString.unpackCString# "!"#))
        ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = InitialPhase [Gentle],
             inline,
             rules,
             eta-expand,
             no case-of-case}
Result size of Simplifier
  = {terms: 289, types: 252, coercions: 0, joins: 0/5}

Rec {
-- RHS size: {terms: 108, types: 83, coercions: 0, joins: 0/5}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 410] 900 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          let {
            f_sb9D :: [Char]
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 40}]
            f_sb9D
              = GHC.Base.build
                  @Char
                  (\ (@b_ib9h) ->
                     ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                       @b_ib9h "Leaf "#) } in
          let {
            g_ib8m :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
            g_ib8m
              = showsPrec
                  @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Classes.geInt
                 a_ab4Q (ghc-prim-0.7.0:GHC.Types.I# 11#)
          of {
            False ->
              \ (x_X2 :: String) ->
                GHC.Base.augment
                  @Char
                  (\ (@b_ib99)
                     (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                     (n_ib9b [OS=OneShot] :: b_ib99) ->
                     GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sb9D)
                  (g_ib8m x_X2);
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     (\ (@b_ib99)
                        (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                        (n_ib9b [OS=OneShot] :: b_ib99) ->
                        GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sb9D)
                     (g_ib8m
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbbX :: [Char]
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 40}]
            f_sbbX
              = GHC.Base.build
                  @Char
                  (\ (@b_ib9h) ->
                     ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                       @b_ib9h "Node "#) } in
          let {
            f_X2 :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
            f_X2
              = $cshowsPrec_ab65
                  @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b1_ab4T } in
          let {
            g_X5 :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
            g_X5
              = $cshowsPrec_ab65
                  @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Classes.geInt
                 a_ab4Q (ghc-prim-0.7.0:GHC.Types.I# 11#)
          of {
            False ->
              \ (x_X7 :: String) ->
                GHC.Base.augment
                  @Char
                  (\ (@b_ib99)
                     (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                     (n_ib9b [OS=OneShot] :: b_ib99) ->
                     GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbbX)
                  (f_X2
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_X5 x_X7)));
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     (\ (@b_ib99)
                        (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                        (n_ib9b [OS=OneShot] :: b_ib99) ->
                        GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbbX)
                     (f_X2
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_X5
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 60 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        (ghc-prim-0.7.0:GHC.Types.I# 0#)
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 11, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 80 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65
           @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 0#))
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

Rec {
-- RHS size: {terms: 23, types: 26, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 100] 190 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf
            @b_ab5s
            (f_aaiK
               (trace
                  @a_ab5r
                  (GHC.Base.build
                     @Char
                     (\ (@b_ib9h) ->
                        ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "ping"#))
                  x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
ds_db8p
  = GHC.Base.build
      @Char
      (\ (@b_ib9h) ->
         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "!"#)

-- RHS size: {terms: 18, types: 18, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 140 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) ->
      mapTree
        @Int
        @[Char]
        (\ (x_X3 :: Int) ->
           GHC.Base.augment
             @Char
             (\ (@b_ib99)
                (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                (n_ib9b [OS=OneShot] :: b_ib99) ->
                GHC.Base.foldr
                  @Char
                  @b_ib99
                  c_ib9a
                  n_ib9b
                  (case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
                   GHC.Show.itos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
                   }))
             ds_db8p)
        x_ib8n

-- RHS size: {terms: 20, types: 19, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 200 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) ->
      mapTree
        @Int
        @[Char]
        (\ (x_aaiQ :: Int) ->
           GHC.Base.build
             @Char
             (\ (@b_ib9S)
                (c_ib9T [OS=OneShot] :: Char -> b_ib9S -> b_ib9S)
                (n_ib9U [OS=OneShot] :: b_ib9S) ->
                GHC.Base.foldr
                  @Char
                  @b_ib9S
                  c_ib9T
                  (ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                     @b_ib9S "!"# c_ib9T n_ib9U)
                  (case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
                   GHC.Show.itos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
                   })))
        ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Specialise ====================
Result size of Specialise
  = {terms: 289, types: 252, coercions: 0, joins: 0/5}

Rec {
-- RHS size: {terms: 108, types: 83, coercions: 0, joins: 0/5}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 410] 900 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          let {
            f_sbcH :: [Char]
            [LclId]
            f_sbcH
              = GHC.Base.build
                  @Char
                  (\ (@b_ib9h) ->
                     ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                       @b_ib9h "Leaf "#) } in
          let {
            g_sbcG :: String -> String
            [LclId]
            g_sbcG
              = showsPrec
                  @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Classes.geInt
                 a_ab4Q (ghc-prim-0.7.0:GHC.Types.I# 11#)
          of {
            False ->
              \ (x_X2 :: String) ->
                GHC.Base.augment
                  @Char
                  (\ (@b_ib99)
                     (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                     (n_ib9b [OS=OneShot] :: b_ib99) ->
                     GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcH)
                  (g_sbcG x_X2);
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     (\ (@b_ib99)
                        (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                        (n_ib9b [OS=OneShot] :: b_ib99) ->
                        GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcH)
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcN :: [Char]
            [LclId]
            f_sbcN
              = GHC.Base.build
                  @Char
                  (\ (@b_ib9h) ->
                     ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                       @b_ib9h "Node "#) } in
          let {
            f_sbcM :: String -> String
            [LclId]
            f_sbcM
              = $cshowsPrec_ab65
                  @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b1_ab4T } in
          let {
            g_sbcL :: String -> String
            [LclId]
            g_sbcL
              = $cshowsPrec_ab65
                  @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 11#) b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Classes.geInt
                 a_ab4Q (ghc-prim-0.7.0:GHC.Types.I# 11#)
          of {
            False ->
              \ (x_X7 :: String) ->
                GHC.Base.augment
                  @Char
                  (\ (@b_ib99)
                     (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                     (n_ib9b [OS=OneShot] :: b_ib99) ->
                     GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcN)
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     (\ (@b_ib99)
                        (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                        (n_ib9b [OS=OneShot] :: b_ib99) ->
                        GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcN)
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 60 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        (ghc-prim-0.7.0:GHC.Types.I# 0#)
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 11, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 80 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65
           @a_ab62 $dShow_ab63 (ghc-prim-0.7.0:GHC.Types.I# 0#))
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

Rec {
-- RHS size: {terms: 23, types: 26, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 100] 190 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf
            @b_ab5s
            (f_aaiK
               (trace
                  @a_ab5r
                  (GHC.Base.build
                     @Char
                     (\ (@b_ib9h) ->
                        ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "ping"#))
                  x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
ds_db8p
  = GHC.Base.build
      @Char
      (\ (@b_ib9h) ->
         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "!"#)

-- RHS size: {terms: 18, types: 18, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 140 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) ->
      mapTree
        @Int
        @[Char]
        (\ (x_X3 :: Int) ->
           GHC.Base.augment
             @Char
             (\ (@b_ib99)
                (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
                (n_ib9b [OS=OneShot] :: b_ib99) ->
                GHC.Base.foldr
                  @Char
                  @b_ib99
                  c_ib9a
                  n_ib9b
                  (case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
                   GHC.Show.itos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
                   }))
             ds_db8p)
        x_ib8n

-- RHS size: {terms: 20, types: 19, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 200 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) ->
      mapTree
        @Int
        @[Char]
        (\ (x_aaiQ :: Int) ->
           GHC.Base.build
             @Char
             (\ (@b_ib9S)
                (c_ib9T [OS=OneShot] :: Char -> b_ib9S -> b_ib9S)
                (n_ib9U [OS=OneShot] :: b_ib9S) ->
                GHC.Base.foldr
                  @Char
                  @b_ib9S
                  c_ib9T
                  (ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                     @b_ib9S "!"# c_ib9T n_ib9U)
                  (case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
                   GHC.Show.itos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
                   })))
        ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Levels added: ====================
<$cshowsPrec_ab65,<0,0>>
<$cshowsPrec_ab65,<0,0>>
  = \ <a_ab62,<1,0>>
      <$dShow_ab63,<1,0>>
      <a_ab4Q,<1,0>>
      <ds_db8q,<1,0>> ->
      case ds_db8q of <wild_X1,<1,2>> {
        Tree.Leaf <b1_ab4R,<1,2>> ->
          let {
            <f_sbcR,F<0,0>>
            <f_sbcR,F<0,0>>
              = GHC.Base.build
                  @GHC.Types.Char
                  (let {
                     <lvl_sbcP,F<0,0>>
                     <lvl_sbcP,F<0,0>>
                       = \ <b_ib9h,<0,1>> ->
                           GHC.CString.unpackFoldrCString#
                             @b_ib9h
                             (let {
                                <lvl_sbcO,F<0,0>>
                                <lvl_sbcO,F<0,0>> = "Leaf "# } in
                              lvl_sbcO) } in
                   lvl_sbcP) } in
          let {
            <g_sbcG,<1,3>>
            <g_sbcG,<1,3>>
              = GHC.Show.showsPrec
                  @a_ab62
                  $dShow_ab63
                  (let {
                     <lvl_sbcS,F<0,0>>
                     <lvl_sbcS,F<0,0>> = GHC.Types.I# 11# } in
                   lvl_sbcS)
                  b1_ab4R } in
          case GHC.Classes.geInt
                 a_ab4Q
                 (let {
                    <lvl_sbcT,F<0,0>>
                    <lvl_sbcT,F<0,0>> = GHC.Types.I# 11# } in
                  lvl_sbcT)
          of <wild_ib8t,<1,4>> {
            GHC.Types.False ->
              \ <x_X2,<2,0>> ->
                GHC.Base.augment
                  @GHC.Types.Char
                  (let {
                     <lvl_sbcU,F<0,0>>
                     <lvl_sbcU,F<0,0>>
                       = \ <b_ib99,<0,1>> <c_ib9a,<0,1>> <n_ib9b,<0,1>> ->
                           GHC.Base.foldr @GHC.Types.Char @b_ib99 c_ib9a n_ib9b f_sbcR } in
                   lvl_sbcU)
                  (g_sbcG x_X2);
            GHC.Types.True ->
              \ <x_ib8v,<2,0>> ->
                GHC.Types.:
                  @GHC.Types.Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @GHC.Types.Char
                     (let {
                        <lvl_sbcV,F<0,0>>
                        <lvl_sbcV,F<0,0>>
                          = \ <b_ib99,<0,1>> <c_ib9a,<0,1>> <n_ib9b,<0,1>> ->
                              GHC.Base.foldr @GHC.Types.Char @b_ib99 c_ib9a n_ib9b f_sbcR } in
                      lvl_sbcV)
                     (g_sbcG (GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Tree.Node <b1_ab4T,<1,2>> <b2_ab4U,<1,2>> ->
          let {
            <f_sbcZ,F<0,0>>
            <f_sbcZ,F<0,0>>
              = GHC.Base.build
                  @GHC.Types.Char
                  (let {
                     <lvl_sbcX,F<0,0>>
                     <lvl_sbcX,F<0,0>>
                       = \ <b_ib9h,<0,1>> ->
                           GHC.CString.unpackFoldrCString#
                             @b_ib9h
                             (let {
                                <lvl_sbcW,F<0,0>>
                                <lvl_sbcW,F<0,0>> = "Node "# } in
                              lvl_sbcW) } in
                   lvl_sbcX) } in
          let {
            <f_sbcM,<1,3>>
            <f_sbcM,<1,3>>
              = $cshowsPrec_ab65
                  @a_ab62
                  $dShow_ab63
                  (let {
                     <lvl_sbd0,F<0,0>>
                     <lvl_sbd0,F<0,0>> = GHC.Types.I# 11# } in
                   lvl_sbd0)
                  b1_ab4T } in
          let {
            <g_sbcL,<1,4>>
            <g_sbcL,<1,4>>
              = $cshowsPrec_ab65
                  @a_ab62
                  $dShow_ab63
                  (let {
                     <lvl_sbd1,F<0,0>>
                     <lvl_sbd1,F<0,0>> = GHC.Types.I# 11# } in
                   lvl_sbd1)
                  b2_ab4U } in
          case GHC.Classes.geInt
                 a_ab4Q
                 (let {
                    <lvl_sbd2,F<0,0>>
                    <lvl_sbd2,F<0,0>> = GHC.Types.I# 11# } in
                  lvl_sbd2)
          of <wild_ib8t,<1,5>> {
            GHC.Types.False ->
              \ <x_X7,<2,0>> ->
                GHC.Base.augment
                  @GHC.Types.Char
                  (let {
                     <lvl_sbd3,F<0,0>>
                     <lvl_sbd3,F<0,0>>
                       = \ <b_ib99,<0,1>> <c_ib9a,<0,1>> <n_ib9b,<0,1>> ->
                           GHC.Base.foldr @GHC.Types.Char @b_ib99 c_ib9a n_ib9b f_sbcZ } in
                   lvl_sbd3)
                  (f_sbcM
                     (GHC.Types.: @GHC.Types.Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            GHC.Types.True ->
              \ <x_ib8v,<2,0>> ->
                GHC.Types.:
                  @GHC.Types.Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @GHC.Types.Char
                     (let {
                        <lvl_sbd4,F<0,0>>
                        <lvl_sbd4,F<0,0>>
                          = \ <b_ib99,<0,1>> <c_ib9a,<0,1>> <n_ib9b,<0,1>> ->
                              GHC.Base.foldr @GHC.Types.Char @b_ib99 c_ib9a n_ib9b f_sbcZ } in
                      lvl_sbd4)
                     (f_sbcM
                        (GHC.Types.:
                           @GHC.Types.Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      };
<$cshow_ab6A,<0,0>>
<$cshow_ab6A,<0,0>>
  = \ <a_ab62,<1,0>> <$dShow_ab63,<1,0>> <x_ib8A,<1,0>> ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        (let {
           <lvl_sbd5,F<0,0>>
           <lvl_sbd5,F<0,0>> = GHC.Types.I# 0# } in
         lvl_sbd5)
        x_ib8A
        (GHC.Types.[] @GHC.Types.Char)
<$cshowList_ab6H,<0,0>>
<$cshowList_ab6H,<0,0>>
  = \ <a_ab62,<1,0>>
      <$dShow_ab63,<1,0>>
      <ls_ib8D,<1,0>>
      <s_ib8E,<1,0>> ->
      GHC.Show.showList__
        @(Tree.Tree a_ab62)
        ($cshowsPrec_ab65
           @a_ab62
           $dShow_ab63
           (let {
              <lvl_sbd6,F<0,0>>
              <lvl_sbd6,F<0,0>> = GHC.Types.I# 0# } in
            lvl_sbd6))
        ls_ib8D
        s_ib8E
<Tree.$fShowTree,<0,0>>
<Tree.$fShowTree,<0,0>>
  = \ <a_ab62,<1,0>> <$dShow_ab63,<1,0>> ->
      GHC.Show.C:Show
        @(Tree.Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)
<Tree.mapTree,<0,0>>
<Tree.mapTree,<0,0>>
  = \ <a_ab5r,<1,0>> <b_ab5s,<1,0>> <f_aaiK,<1,0>> <ds_db7E,<1,0>> ->
      case ds_db7E of <wild_X1,<1,2>> {
        Tree.Leaf <x_aaiL,<1,2>> ->
          Tree.Leaf
            @b_ab5s
            (f_aaiK
               (Debug.Trace.trace
                  @a_ab5r
                  (let {
                     <lvl_sbd9,F<0,0>>
                     <lvl_sbd9,F<0,0>>
                       = GHC.Base.build
                           @GHC.Types.Char
                           (let {
                              <lvl_sbd8,F<0,0>>
                              <lvl_sbd8,F<0,0>>
                                = \ <b_ib9h,<0,1>> ->
                                    GHC.CString.unpackFoldrCString#
                                      @b_ib9h
                                      (let {
                                         <lvl_sbd7,F<0,0>>
                                         <lvl_sbd7,F<0,0>> = "ping"# } in
                                       lvl_sbd7) } in
                            lvl_sbd8) } in
                   lvl_sbd9)
                  x_aaiL));
        Tree.Node <lhs_aaiN,<1,2>> <rhs_aaiO,<1,2>> ->
          Tree.Node
            @b_ab5s
            (Tree.mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (Tree.mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      };
<$trModule_sbc0,<0,0>>
<$trModule_sbc0,<0,0>> = "main"#
<$trModule_sbc1,<0,0>>
<$trModule_sbc1,<0,0>> = GHC.Types.TrNameS $trModule_sbc0
<$trModule_sbc2,<0,0>>
<$trModule_sbc2,<0,0>> = "Tree"#
<$trModule_sbc3,<0,0>>
<$trModule_sbc3,<0,0>> = GHC.Types.TrNameS $trModule_sbc2
<Tree.$trModule,<0,0>>
<Tree.$trModule,<0,0>>
  = GHC.Types.Module $trModule_sbc1 $trModule_sbc3
<$krep_sbc4,<0,0>>
<$krep_sbc4,<0,0>> = GHC.Types.I# 0#
<$krep_ab7y,<0,0>>
<$krep_ab7y,<0,0>> = GHC.Types.$WKindRepVar $krep_sbc4
<$tcTree_sbc5,<0,0>>
<$tcTree_sbc5,<0,0>> = "Tree"#
<$tcTree_sbc6,<0,0>>
<$tcTree_sbc6,<0,0>> = GHC.Types.TrNameS $tcTree_sbc5
<Tree.$tcTree,<0,0>>
<Tree.$tcTree,<0,0>>
  = GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      GHC.Types.krep$*Arr*
<$krep_sbc7,<0,0>>
<$krep_sbc7,<0,0>>
  = GHC.Types.:
      @GHC.Types.KindRep $krep_ab7y (GHC.Types.[] @GHC.Types.KindRep)
<$krep_ab7z,<0,0>>
<$krep_ab7z,<0,0>>
  = GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7
<$krep_ab7x,<0,0>>
<$krep_ab7x,<0,0>> = GHC.Types.KindRepFun $krep_ab7y $krep_ab7z
<$tc'Leaf_sbc8,<0,0>>
<$tc'Leaf_sbc8,<0,0>> = "'Leaf"#
<$tc'Leaf_sbc9,<0,0>>
<$tc'Leaf_sbc9,<0,0>> = GHC.Types.TrNameS $tc'Leaf_sbc8
<Tree.$tc'Leaf,<0,0>>
<Tree.$tc'Leaf,<0,0>>
  = GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x
<$krep_ab7B,<0,0>>
<$krep_ab7B,<0,0>> = GHC.Types.KindRepFun $krep_ab7z $krep_ab7z
<$krep_ab7A,<0,0>>
<$krep_ab7A,<0,0>> = GHC.Types.KindRepFun $krep_ab7z $krep_ab7B
<$tc'Node_sbca,<0,0>>
<$tc'Node_sbca,<0,0>> = "'Node"#
<$tc'Node_sbcb,<0,0>>
<$tc'Node_sbcb,<0,0>> = GHC.Types.TrNameS $tc'Node_sbca
<Tree.$tc'Node,<0,0>>
<Tree.$tc'Node,<0,0>>
  = GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A
<ds_db8p,<0,0>>
<ds_db8p,<0,0>>
  = GHC.Base.build
      @GHC.Types.Char
      (let {
         <lvl_sbdb,F<0,0>>
         <lvl_sbdb,F<0,0>>
           = \ <b_ib9h,<0,1>> ->
               GHC.CString.unpackFoldrCString#
                 @b_ib9h
                 (let {
                    <lvl_sbda,F<0,0>>
                    <lvl_sbda,F<0,0>> = "!"# } in
                  lvl_sbda) } in
       lvl_sbdb)
<Tree.makeImportant,<0,0>>
<Tree.makeImportant,<0,0>>
  = \ <x_ib8n,<1,0>> ->
      Tree.mapTree
        @GHC.Types.Int
        @[GHC.Types.Char]
        (let {
           <lvl_sbdc,F<0,0>>
           <lvl_sbdc,F<0,0>>
             = \ <x_X3,<1,0>> ->
                 GHC.Base.augment
                   @GHC.Types.Char
                   (\ <b_ib99,<1,2>> <c_ib9a,<1,2>> <n_ib9b,<1,2>> ->
                      GHC.Base.foldr
                        @GHC.Types.Char
                        @b_ib99
                        c_ib9a
                        n_ib9b
                        (case x_X3 of <wild_ibce,<1,4>> { GHC.Types.I# <n_ibcf,<1,4>> ->
                         GHC.Show.itos n_ibcf (GHC.Types.[] @GHC.Types.Char)
                         }))
                   ds_db8p } in
         lvl_sbdc)
        x_ib8n
<Tree.makeImportantFused,<0,0>>
<Tree.makeImportantFused,<0,0>>
  = \ <ts_aaiP,<1,0>> ->
      Tree.mapTree
        @GHC.Types.Int
        @[GHC.Types.Char]
        (let {
           <lvl_sbde,F<0,0>>
           <lvl_sbde,F<0,0>>
             = \ <x_aaiQ,<1,0>> ->
                 GHC.Base.build
                   @GHC.Types.Char
                   (\ <b_ib9S,<1,2>> <c_ib9T,<1,2>> <n_ib9U,<1,2>> ->
                      GHC.Base.foldr
                        @GHC.Types.Char
                        @b_ib9S
                        c_ib9T
                        (GHC.CString.unpackFoldrCString#
                           @b_ib9S
                           (let {
                              <lvl_sbdd,F<0,0>>
                              <lvl_sbdd,F<0,0>> = "!"# } in
                            lvl_sbdd)
                           c_ib9T
                           n_ib9U)
                        (case x_aaiQ of <wild_ibce,<1,4>> { GHC.Types.I# <n_ibcf,<1,4>> ->
                         GHC.Show.itos n_ibcf (GHC.Types.[] @GHC.Types.Char)
                         })) } in
         lvl_sbde)
        ts_aaiP



==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = False}) ====================
Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = False})
  = {terms: 335, types: 328, coercions: 0, joins: 0/3}

Rec {
-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbcO :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbcO = "Leaf "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_sbcP :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbcP
  = \ (@b_ib9h) ->
      ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbcO

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId]
f_sbcR = GHC.Base.build @Char lvl_sbcP

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbcU :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbcU
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcR

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbcV :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbcV
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcR

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcT :: Int
[LclId]
lvl_sbcT = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbcW :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbcW = "Node "#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_sbcX :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbcX
  = \ (@b_ib9h) ->
      ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbcW

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId]
f_sbcZ = GHC.Base.build @Char lvl_sbcX

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbd3 :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbd3
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcZ

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbd4 :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbd4
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcZ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd2 :: Int
[LclId]
lvl_sbd2 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId, Arity=3]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          let {
            g_sbcG :: String -> String
            [LclId]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Classes.geInt a_ab4Q lvl_sbcT of {
            False ->
              \ (x_X2 :: String) ->
                GHC.Base.augment @Char lvl_sbcU (g_sbcG x_X2);
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     lvl_sbcV
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcM :: String -> String
            [LclId]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          let {
            g_sbcL :: String -> String
            [LclId]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Classes.geInt a_ab4Q lvl_sbd2 of {
            False ->
              \ (x_X7 :: String) ->
                GHC.Base.augment
                  @Char
                  lvl_sbd3
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     lvl_sbd4
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId, Arity=2]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId, Arity=3]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

Rec {
-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbd7 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbd7 = "ping"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_sbd8 :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbd8
  = \ (@b_ib9h) ->
      ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbd7

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId]
lvl_sbd9 = GHC.Base.build @Char lvl_sbd8

-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbda :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbda = "!"#

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
lvl_sbdb :: forall {b}. (Char -> b -> b) -> b -> b
[LclId]
lvl_sbdb
  = \ (@b_ib9h) ->
      ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbda

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId]
ds_db8p = GHC.Base.build @Char lvl_sbdb

-- RHS size: {terms: 15, types: 13, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      GHC.Base.augment
        @Char
        (\ (@b_ib99)
           (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
           (n_ib9b [OS=OneShot] :: b_ib99) ->
           GHC.Base.foldr
             @Char
             @b_ib99
             c_ib9a
             n_ib9b
             (case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
              GHC.Show.itos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
              }))
        ds_db8p

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX, Arity=1]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbdd = "!"#

-- RHS size: {terms: 17, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      GHC.Base.build
        @Char
        (\ (@b_ib9S)
           (c_ib9T [OS=OneShot] :: Char -> b_ib9S -> b_ib9S)
           (n_ib9U [OS=OneShot] :: b_ib9S) ->
           GHC.Base.foldr
             @Char
             @b_ib9S
             c_ib9T
             (ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                @b_ib9S lvl_sbdd c_ib9T n_ib9U)
             (case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
              GHC.Show.itos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
              }))

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX, Arity=1]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = 2 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 329, types: 316, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd2 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd2 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 40}]
f_sbcZ
  = GHC.Base.build
      @Char
      (\ (@b_ib9h) ->
         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "Node "#)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbd3 :: forall {b}. (Char -> b -> b) -> b -> b
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
lvl_sbd3
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcZ

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbd4 :: forall {b}. (Char -> b -> b) -> b -> b
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
lvl_sbd4
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcZ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcT :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcT = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 40}]
f_sbcR
  = GHC.Base.build
      @Char
      (\ (@b_ib9h) ->
         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "Leaf "#)

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbcU :: forall {b}. (Char -> b -> b) -> b -> b
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
lvl_sbcU
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcR

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
lvl_sbcV :: forall {b}. (Char -> b -> b) -> b -> b
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
lvl_sbcV
  = \ (@b_ib99)
      (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
      (n_ib9b [OS=OneShot] :: b_ib99) ->
      GHC.Base.foldr @Char @b_ib99 c_ib9a n_ib9b f_sbcR

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 210] 490 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          let {
            g_sbcG :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Classes.geInt a_ab4Q lvl_sbcT of {
            False ->
              \ (x_X2 :: String) ->
                GHC.Base.augment @Char lvl_sbcU (g_sbcG x_X2);
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     lvl_sbcV
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcM :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          let {
            g_sbcL :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Classes.geInt a_ab4Q lvl_sbd2 of {
            False ->
              \ (x_X7 :: String) ->
                GHC.Base.augment
                  @Char
                  lvl_sbd3
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            True ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.augment
                     @Char
                     lvl_sbd4
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
lvl_sbd9
  = GHC.Base.build
      @Char
      (\ (@b_ib9h) ->
         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "ping"#)

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 40}]
ds_db8p
  = GHC.Base.build
      @Char
      (\ (@b_ib9h) ->
         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h "!"#)

-- RHS size: {terms: 20, types: 23, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 120 40}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      GHC.Base.augment
        @Char
        (\ (@b_ib99)
           (c_ib9a [OS=OneShot] :: Char -> b_ib99 -> b_ib99)
           (n_ib9b [OS=OneShot] :: b_ib99) ->
           case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
           case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
           { (# ww1_ibcl, ww2_ibcm #) ->
           GHC.Base.foldr
             @Char
             @b_ib99
             c_ib9a
             n_ib9b
             (ghc-prim-0.7.0:GHC.Types.: @Char ww1_ibcl ww2_ibcm)
           }
           })
        ds_db8p

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 22, types: 24, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 160 40}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      GHC.Base.build
        @Char
        (\ (@b_ib9S)
           (c_ib9T [OS=OneShot] :: Char -> b_ib9S -> b_ib9S)
           (n_ib9U [OS=OneShot] :: b_ib9S) ->
           case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
           case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
           { (# ww1_ibcl, ww2_ibcm #) ->
           GHC.Base.foldr
             @Char
             @b_ib9S
             c_ib9T
             (ghc-prim-0.7.0:GHC.CString.unpackFoldrCString#
                @b_ib9S lvl_sbdd c_ib9T n_ib9U)
             (ghc-prim-0.7.0:GHC.Types.: @Char ww1_ibcl ww2_ibcm)
           }
           })

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = 1 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 282, types: 227, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          let {
            g_sbcG :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcM :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          let {
            g_sbcL :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = 0 [main],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 282, types: 227, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          let {
            g_sbcG :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcM :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          let {
            g_sbcL :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Float inwards ====================
Result size of Float inwards
  = {terms: 282, types: 227, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcG :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T b2_ab4U ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcL :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          let {
            f_sbcM :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Called arity analysis ====================
Result size of Called arity analysis
  = {terms: 282, types: 227, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 CallArity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcG :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T b2_ab4U ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcL :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          let {
            f_sbcM :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 CallArity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 CallArity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_sbc4 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc4 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.$WKindRepVar $krep_sbc4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = FinalPhase [post-call-arity],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 279, types: 226, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (a_ab4Q :: Int)
      (ds_db8q :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcG :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T b2_ab4U ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcL :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          let {
            f_sbcM :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Demand analysis ====================
Result size of Demand analysis
  = {terms: 279, types: 226, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (a_ab4Q [Dmd=<S,1*U(U)>] :: Int)
      (ds_db8q [Dmd=<S,1*U>] :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T [Dmd=<L,1*U>] b2_ab4U [Dmd=<L,1*U>] ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (x_ib8A [Dmd=<S,1*U>] :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (ls_ib8D [Dmd=<S,1*U>] :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E [Dmd=<S,1*U>] :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN [Dmd=<L,1*U>] rhs_aaiO [Dmd=<L,1*U>] ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 [Dmd=<S,1*U(U)>] :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm [Dmd=<L,1*U>] #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n [Dmd=<S,1*U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ [Dmd=<S,1*U(U)>] :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm [Dmd=<L,1*U>] #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP [Dmd=<S,1*U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Constructed Product Result analysis ====================
Result size of Constructed Product Result analysis
  = {terms: 279, types: 226, coercions: 0, joins: 0/3}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 75, types: 43, coercions: 0, joins: 0/3}
$cshowsPrec_ab65 [Occ=LoopBreaker]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 40 251] 572 240}]
$cshowsPrec_ab65
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (a_ab4Q [Dmd=<S,1*U(U)>] :: Int)
      (ds_db8q [Dmd=<S,1*U>] :: Tree a_ab62) ->
      case ds_db8q of {
        Leaf b1_ab4R ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T [Dmd=<L,1*U>] b2_ab4U [Dmd=<L,1*U>] ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 50 0}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (x_ib8A [Dmd=<S,1*U>] :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 70 0}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (ls_ib8D [Dmd=<S,1*U>] :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E [Dmd=<S,1*U>] :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN [Dmd=<L,1*U>] rhs_aaiO [Dmd=<L,1*U>] ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 0}]
lvl_sbdc
  = \ (x_X3 [Dmd=<S,1*U(U)>] :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm [Dmd=<L,1*U>] #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportant
  = \ (x_ib8n [Dmd=<S,1*U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 110 0}]
lvl_sbde
  = \ (x_aaiQ [Dmd=<S,1*U(U)>] :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm [Dmd=<L,1*U>] #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 30 0}]
makeImportantFused
  = \ (ts_aaiP [Dmd=<S,1*U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Worker Wrapper binds ====================
Result size of Worker Wrapper binds
  = {terms: 301, types: 253, coercions: 0, joins: 0/7}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd1 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd1 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd0 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd0 = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 85, types: 52, coercions: 0, joins: 0/7}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId, Arity=3, Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 [Dmd=<S,1*U>] :: Tree a_sbeZ) ->
      let {
        w_sbf1 [Dmd=<S,1*U(U)>] :: Int
        [LclId]
        w_sbf1 = ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 } in
      let {
        @a_ab62
        a_ab62 = TYPE: a_sbeZ } in
      let {
        $dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62
        [LclId]
        $dShow_ab63 = w_sbf0 } in
      let {
        a_ab4Q [Dmd=<S,U(U)>] :: Int
        [LclId]
        a_ab4Q = w_sbf1 } in
      let {
        ds_db8q [Dmd=<S,U>] :: Tree a_ab62
        [LclId]
        ds_db8q = w_sbf2 } in
      case ds_db8q of {
        Leaf b1_ab4R ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_ab62 $dShow_ab63 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          }
          };
        Node b1_ab4T b2_ab4U ->
          case a_ab4Q of { ghc-prim-0.7.0:GHC.Types.I# x_ibbP ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd1 b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd0 b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# x_ibbP 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
          }
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1, Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!, Dmd=<S,1*U(U)>] :: Int)
                 (w_sbf2 [Occ=Once1, Dmd=<S,1*U>] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_sbeZ)
      (w_sbf1 [Dmd=<S,1*U(U)>] :: Int)
      (w_sbf2 [Dmd=<S,1*U>] :: Tree a_sbeZ) ->
      case w_sbf1 of ww_sbf4 { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (x_ib8A [Dmd=<S,U>] :: Tree a_ab62) ->
      $cshowsPrec_ab65
        @a_ab62
        $dShow_ab63
        lvl_sbd5
        x_ib8A
        (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (ls_ib8D [Dmd=<S,U>] :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E [Dmd=<S,U>] :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 [Dmd=<S,U(U)>] :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n [Dmd=<S,U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_aaiQ [Occ=Once1!] :: Int) ->
                 case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++
                   @Char
                   (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
                   ww1_ibcl
                   ww2_ibcm
                 }
                 }}]
lvl_sbde
  = \ (x_aaiQ [Dmd=<S,U(U)>] :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbde ts_aaiP}]
makeImportantFused
  = \ (ts_aaiP [Dmd=<S,U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = FinalPhase [post-worker-wrapper],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 281, types: 240, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 241] 552 240}]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf2 of {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w_sbf1 :: Int)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_aaiQ [Occ=Once1!] :: Int) ->
                 case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++
                   @Char
                   (GHC.Base.build
                      @Char
                      (\ (@b_ib9h) ->
                         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbdd))
                   ww1_ibcl
                   ww2_ibcm
                 }
                 }}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbde ts_aaiP}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Exitification transformation ====================
Result size of Exitification transformation
  = {terms: 281, types: 240, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 241] 552 240}]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf2 of {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w_sbf1 :: Int)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbdd = "!"#

-- RHS size: {terms: 14, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_aaiQ [Occ=Once1!] :: Int) ->
                 case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++
                   @Char
                   (GHC.Base.build
                      @Char
                      (\ (@b_ib9h) ->
                         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbdd))
                   ww1_ibcl
                   ww2_ibcm
                 }
                 }}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++
        @Char
        (ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd)
        ww1_ibcl
        ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbde ts_aaiP}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Levels added: ====================
<f_sbe1,<0,0>>
<f_sbe1,<0,0>> = "Node "#
<f_sbcZ,<0,0>>
<f_sbcZ,<0,0>> = GHC.CString.unpackCString# f_sbe1
<lvl_sbcS,<0,0>>
<lvl_sbcS,<0,0>> = GHC.Types.I# 11#
<f_sbe2,<0,0>>
<f_sbe2,<0,0>> = "Leaf "#
<f_sbcR,<0,0>>
<f_sbcR,<0,0>> = GHC.CString.unpackCString# f_sbe2
<$w$cshowsPrec_sbf7,<0,0>>
<$w$cshowsPrec_sbf7,<0,0>>
  = \ <a_sbeZ,<1,0>> <w_sbf0,<1,0>> <ww_sbf5,<1,0>> <w_sbf2,<1,0>> ->
      case w_sbf2 of <wild_X1,<1,2>> {
        Tree.Leaf <b1_ab4R,<1,2>> ->
          let {
            <g_sbcG,<1,3>>
            <g_sbcG,<1,3>>
              = GHC.Show.showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case GHC.Prim.>=# ww_sbf5 11# of <lwild_sbe6,<1,4>> {
            __DEFAULT ->
              \ <x_X2,<2,0>> -> GHC.Base.++ @GHC.Types.Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ <x_ib8v,<2,0>> ->
                GHC.Types.:
                  @GHC.Types.Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.++
                     @GHC.Types.Char
                     f_sbcR
                     (g_sbcG (GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Tree.Node <b1_ab4T,<1,2>> <b2_ab4U,<1,2>> ->
          let {
            <g_sbcL,<1,3>>
            <g_sbcL,<1,3>> = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          let {
            <f_sbcM,<1,4>>
            <f_sbcM,<1,4>> = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          case GHC.Prim.>=# ww_sbf5 11# of <lwild_sbe9,<1,5>> {
            __DEFAULT ->
              \ <x_X7,<2,0>> ->
                GHC.Base.++
                  @GHC.Types.Char
                  f_sbcZ
                  (f_sbcM
                     (GHC.Types.: @GHC.Types.Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ <x_ib8v,<2,0>> ->
                GHC.Types.:
                  @GHC.Types.Char
                  GHC.Show.$fShow(,)4
                  (GHC.Base.++
                     @GHC.Types.Char
                     f_sbcZ
                     (f_sbcM
                        (GHC.Types.:
                           @GHC.Types.Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      };
<$cshowsPrec_ab65,<0,0>>
<$cshowsPrec_ab65,<0,0>>
  = \ <a_sbeZ,<1,0>> <w_sbf0,<1,0>> <w_sbf1,<1,0>> <w_sbf2,<1,0>> ->
      case w_sbf1 of <ww_sbf4,<1,2>> { GHC.Types.I# <ww_sbf5,<1,2>> ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }
<lvl_sbd5,<0,0>>
<lvl_sbd5,<0,0>> = GHC.Types.I# 0#
<$cshow_ab6A,<0,0>>
<$cshow_ab6A,<0,0>>
  = \ <a_ab62,<1,0>> <$dShow_ab63,<1,0>> <x_ib8A,<1,0>> ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (GHC.Types.[] @GHC.Types.Char)
<lvl_sbd6,<0,0>>
<lvl_sbd6,<0,0>> = GHC.Types.I# 0#
<$cshowList_ab6H,<0,0>>
<$cshowList_ab6H,<0,0>>
  = \ <a_ab62,<1,0>>
      <$dShow_ab63,<1,0>>
      <ls_ib8D,<1,0>>
      <s_ib8E,<1,0>> ->
      GHC.Show.showList__
        @(Tree.Tree a_ab62)
        (\ <w_sbf2,<2,0>> ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E
<Tree.$fShowTree,<0,0>>
<Tree.$fShowTree,<0,0>>
  = \ <a_ab62,<1,0>> <$dShow_ab63,<1,0>> ->
      GHC.Show.C:Show
        @(Tree.Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)
<lvl_sbea,<0,0>>
<lvl_sbea,<0,0>> = "ping"#
<lvl_sbd9,<0,0>>
<lvl_sbd9,<0,0>> = GHC.CString.unpackCString# lvl_sbea
<Tree.mapTree,<0,0>>
<Tree.mapTree,<0,0>>
  = \ <a_ab5r,<1,0>> <b_ab5s,<1,0>> <f_aaiK,<1,0>> <ds_db7E,<1,0>> ->
      case ds_db7E of <wild_X1,<1,2>> {
        Tree.Leaf <x_aaiL,<1,2>> ->
          Tree.Leaf
            @b_ab5s (f_aaiK (Debug.Trace.trace @a_ab5r lvl_sbd9 x_aaiL));
        Tree.Node <lhs_aaiN,<1,2>> <rhs_aaiO,<1,2>> ->
          Tree.Node
            @b_ab5s
            (Tree.mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (Tree.mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      };
<$trModule_sbc0,<0,0>>
<$trModule_sbc0,<0,0>> = "main"#
<$trModule_sbc1,<0,0>>
<$trModule_sbc1,<0,0>> = GHC.Types.TrNameS $trModule_sbc0
<$trModule_sbc2,<0,0>>
<$trModule_sbc2,<0,0>> = "Tree"#
<$trModule_sbc3,<0,0>>
<$trModule_sbc3,<0,0>> = GHC.Types.TrNameS $trModule_sbc2
<Tree.$trModule,<0,0>>
<Tree.$trModule,<0,0>>
  = GHC.Types.Module $trModule_sbc1 $trModule_sbc3
<$krep_ab7y,<0,0>>
<$krep_ab7y,<0,0>> = GHC.Types.KindRepVar 0#
<$tcTree_sbc5,<0,0>>
<$tcTree_sbc5,<0,0>> = "Tree"#
<$tcTree_sbc6,<0,0>>
<$tcTree_sbc6,<0,0>> = GHC.Types.TrNameS $tcTree_sbc5
<Tree.$tcTree,<0,0>>
<Tree.$tcTree,<0,0>>
  = GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      GHC.Types.krep$*Arr*
<$krep_sbc7,<0,0>>
<$krep_sbc7,<0,0>>
  = GHC.Types.:
      @GHC.Types.KindRep $krep_ab7y (GHC.Types.[] @GHC.Types.KindRep)
<$krep_ab7z,<0,0>>
<$krep_ab7z,<0,0>>
  = GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7
<$krep_ab7x,<0,0>>
<$krep_ab7x,<0,0>> = GHC.Types.KindRepFun $krep_ab7y $krep_ab7z
<$tc'Leaf_sbc8,<0,0>>
<$tc'Leaf_sbc8,<0,0>> = "'Leaf"#
<$tc'Leaf_sbc9,<0,0>>
<$tc'Leaf_sbc9,<0,0>> = GHC.Types.TrNameS $tc'Leaf_sbc8
<Tree.$tc'Leaf,<0,0>>
<Tree.$tc'Leaf,<0,0>>
  = GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x
<$krep_ab7B,<0,0>>
<$krep_ab7B,<0,0>> = GHC.Types.KindRepFun $krep_ab7z $krep_ab7z
<$krep_ab7A,<0,0>>
<$krep_ab7A,<0,0>> = GHC.Types.KindRepFun $krep_ab7z $krep_ab7B
<$tc'Node_sbca,<0,0>>
<$tc'Node_sbca,<0,0>> = "'Node"#
<$tc'Node_sbcb,<0,0>>
<$tc'Node_sbcb,<0,0>> = GHC.Types.TrNameS $tc'Node_sbca
<Tree.$tc'Node,<0,0>>
<Tree.$tc'Node,<0,0>>
  = GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A
<ds_sbec,<0,0>>
<ds_sbec,<0,0>> = "!"#
<ds_db8p,<0,0>>
<ds_db8p,<0,0>> = GHC.CString.unpackCString# ds_sbec
<lvl_sbdc,<0,0>>
<lvl_sbdc,<0,0>>
  = \ <x_X3,<1,0>> ->
      case x_X3 of <wild_ibce,<1,2>> { GHC.Types.I# <n_ibcf,<1,2>> ->
      case GHC.Show.$witos n_ibcf (GHC.Types.[] @GHC.Types.Char)
      of <ww_ibck,<1,3>>
      { (# <ww1_ibcl,<1,3>>, <ww2_ibcm,<1,3>> #) ->
      GHC.Base.++_$s++ @GHC.Types.Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }
<Tree.makeImportant,<0,0>>
<Tree.makeImportant,<0,0>>
  = \ <x_ib8n,<1,0>> ->
      Tree.mapTree @GHC.Types.Int @[GHC.Types.Char] lvl_sbdc x_ib8n
<lvl_sbdd,<0,0>>
<lvl_sbdd,<0,0>> = "!"#
<lvl_sbde,<0,0>>
<lvl_sbde,<0,0>>
  = \ <x_aaiQ,<1,0>> ->
      case x_aaiQ of <wild_ibce,<1,2>> { GHC.Types.I# <n_ibcf,<1,2>> ->
      case GHC.Show.$witos n_ibcf (GHC.Types.[] @GHC.Types.Char)
      of <ww_ibck,<1,3>>
      { (# <ww1_ibcl,<1,3>>, <ww2_ibcm,<1,3>> #) ->
      GHC.Base.++_$s++
        @GHC.Types.Char
        (let {
           <lvl_sbfG,F<0,0>>
           <lvl_sbfG,F<0,0>> = GHC.CString.unpackCString# lvl_sbdd } in
         lvl_sbfG)
        ww1_ibcl
        ww2_ibcm
      }
      }
<Tree.makeImportantFused,<0,0>>
<Tree.makeImportantFused,<0,0>>
  = \ <ts_aaiP,<1,0>> ->
      Tree.mapTree @GHC.Types.Int @[GHC.Types.Char] lvl_sbde ts_aaiP



==================== Float out(FOS {Lam = Just 0, Consts = True, OverSatApps = True}) ====================
Result size of Float out(FOS {Lam = Just 0,
                              Consts = True,
                              OverSatApps = True})
  = {terms: 283, types: 242, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId, Arity=3, Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf2 of {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w_sbf1 :: Int)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId]
lvl_sbd6 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd6)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tcTree_sbc6 = ghc-prim-0.7.0:GHC.Types.TrNameS $tcTree_sbc5

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $tcTree_sbc6
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbdd = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbfG :: [Char]
[LclId]
lvl_sbfG = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbdd

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_aaiQ [Occ=Once1!] :: Int) ->
                 case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++
                   @Char
                   (GHC.Base.build
                      @Char
                      (\ (@b_ib9h) ->
                         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h lvl_sbdd))
                   ww1_ibcl
                   ww2_ibcm
                 }
                 }}]
lvl_sbde
  = \ (x_aaiQ :: Int) ->
      case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char lvl_sbfG ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbde ts_aaiP}]
makeImportantFused
  = \ (ts_aaiP :: Tree Int) -> mapTree @Int @[Char] lvl_sbde ts_aaiP


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Common sub-expression ====================
Result size of Common sub-expression
  = {terms: 265, types: 223, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId, Arity=3, Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf2 of wild_X1 [Dmd=<L,A>] {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of lwild_sbe6 {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of lwild_sbe9 {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w_sbf1 :: Int)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf1 of ww_sbf4 { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId]
lvl_sbd6 = lvl_sbd5

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd5)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of wild_X1 [Dmd=<L,A>] {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tcTree_sbc6 = $trModule_sbc3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $trModule_sbc3
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of wild_ibce [Dmd=<L,A>]
      { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
      of ww_ibck
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbdd = "!"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbfG :: [Char]
[LclId]
lvl_sbfG = ds_db8p

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_aaiQ [Occ=Once1!] :: Int) ->
                 case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++
                   @Char
                   (GHC.Base.build
                      @Char
                      (\ (@b_ib9h) ->
                         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h ds_sbec))
                   ww1_ibcl
                   ww2_ibcm
                 }
                 }}]
lvl_sbde = lvl_sbdc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc ts_aaiP}]
makeImportantFused = makeImportant


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Float inwards ====================
Result size of Float inwards
  = {terms: 265, types: 223, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId, Arity=3, Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf2 of wild_X1 [Dmd=<L,A>] {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of lwild_sbe6 {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of lwild_sbe9 {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w_sbf1 :: Int)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf1 of ww_sbf4 { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbd6 :: Int
[LclId]
lvl_sbd6 = lvl_sbd5

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd5)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of wild_X1 [Dmd=<L,A>] {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc5 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tcTree_sbc5 = "Tree"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTree_sbc6 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tcTree_sbc6 = $trModule_sbc3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $trModule_sbc3
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of wild_ibce [Dmd=<L,A>]
      { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char)
      of ww_ibck
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbdd :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId]
lvl_sbdd = "!"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbfG :: [Char]
[LclId]
lvl_sbfG = ds_db8p

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbde :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_aaiQ [Occ=Once1!] :: Int) ->
                 case x_aaiQ of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++
                   @Char
                   (GHC.Base.build
                      @Char
                      (\ (@b_ib9h) ->
                         ghc-prim-0.7.0:GHC.CString.unpackFoldrCString# @b_ib9h ds_sbec))
                   ww1_ibcl
                   ww2_ibcm
                 }
                 }}]
lvl_sbde = lvl_sbdc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc ts_aaiP}]
makeImportantFused = makeImportant


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Simplifier ====================
  Max iterations = 4
  SimplMode {Phase = FinalPhase [final],
             inline,
             rules,
             eta-expand,
             case-of-case}
Result size of Simplifier
  = {terms: 253, types: 214, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 241] 552 240}]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf2 of {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w_sbf1 :: Int)
      (w_sbf2 :: Tree a_sbeZ) ->
      case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd5)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $trModule_sbc3
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) -> mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc ts_aaiP}]
makeImportantFused = makeImportant


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Demand analysis ====================
Result size of Demand analysis
  = {terms: 253, types: 214, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe1 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe1 = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcZ :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcZ = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbcS :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbcS = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_sbe2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
f_sbe2 = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f_sbcR :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
f_sbcR = ghc-prim-0.7.0:GHC.CString.unpackCString# f_sbe2

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
$w$cshowsPrec_sbf7 [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [30 0 241] 552 240}]
$w$cshowsPrec_sbf7
  = \ (@a_sbeZ)
      (w_sbf0 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w_sbf2 [Dmd=<S,1*U>] :: Tree a_sbeZ) ->
      case w_sbf2 of {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_sbcS b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f_sbcR (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcR
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T [Dmd=<L,1*U>] b2_ab4U [Dmd=<L,1*U>] ->
          let {
            f_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            f_sbcM = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b1_ab4T } in
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId,
             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                     WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
            g_sbcL = $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 11# b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f_sbcZ
                  (f_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f_sbcZ
                     (f_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$cshowsPrec_ab65 [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w_sbf1 [Occ=Once1!] :: Int)
                 (w_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 [Occ=Once1] ->
                 $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
                 }}]
$cshowsPrec_ab65
  = \ (@a_sbeZ)
      (w_sbf0 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_sbeZ)
      (w_sbf1 [Dmd=<S,1*U(U)>] :: Int)
      (w_sbf2 [Dmd=<S,1*U>] :: Tree a_sbeZ) ->
      case w_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww_sbf5 ->
      $w$cshowsPrec_sbf7 @a_sbeZ w_sbf0 ww_sbf5 w_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd5 :: Int
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
lvl_sbd5 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$cshow_ab6A :: forall a. Show a => Tree a -> String
[LclId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 $cshowsPrec_ab65
                   @a_ab62
                   $dShow_ab63
                   lvl_sbd5
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
$cshow_ab6A
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (x_ib8A [Dmd=<S,1*U>] :: Tree a_ab62) ->
      $w$cshowsPrec_sbf7
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$cshowList_ab6H :: forall a. Show a => [Tree a] -> ShowS
[LclId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   ($cshowsPrec_ab65 @a_ab62 $dShow_ab63 lvl_sbd5)
                   ls_ib8D
                   s_ib8E}]
$cshowList_ab6H
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62)
      (ls_ib8D [Dmd=<S,1*U>] :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 [Dmd=<S,1*U>] :: Tree a_ab62) ->
           $w$cshowsPrec_sbf7 @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[LclIdX[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       $cshowsPrec_ab65 @a_aa5j v_B1
                       $cshow_ab6A @a_aa5j v_B1
                       $cshowList_ab6H @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62)
      ($dShow_ab63 [Dmd=<L,U(C(C1(C(U))),A,A)>] :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        ($cshowsPrec_ab65 @a_ab62 $dShow_ab63)
        ($cshow_ab6A @a_ab62 $dShow_ab63)
        ($cshowList_ab6H @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_sbea :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbea = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_sbd9 :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
lvl_sbd9 = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl_sbea

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[LclIdX,
 Arity=2,
 Str=<L,C(U)><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [60 90] 150 20},
 RULES: "mapTree/mapTree2"
            forall (@b_ab7k)
                   (@b_ab7m)
                   (@a_ab7j)
                   (f_aaiT :: b_ab7m -> b_ab7k)
                   (g_aaiU :: a_ab7j -> b_ab7m)
                   (t_aaiV :: Tree a_ab7j).
              mapTree @b_ab7m
                      @b_ab7k
                      f_aaiT
                      (mapTree @a_ab7j @b_ab7m g_aaiU t_aaiV)
              = mapTree
                  @a_ab7j @b_ab7k (. @b_ab7m @b_ab7k @a_ab7j f_aaiT g_aaiU) t_aaiV]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f_aaiK [Dmd=<L,C(U)>] :: a_ab5r -> b_ab5s)
      (ds_db7E [Dmd=<S,1*U>] :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f_aaiK (trace @a_ab5r lvl_sbd9 x_aaiL));
        Node lhs_aaiN [Dmd=<L,1*U>] rhs_aaiO [Dmd=<L,1*U>] ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc0 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc0 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc1 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc1 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
$trModule_sbc2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule_sbc3 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$trModule_sbc3 = ghc-prim-0.7.0:GHC.Types.TrNameS $trModule_sbc2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module $trModule_sbc1 $trModule_sbc3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_ab7y [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7y = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      $trModule_sbc3
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep_sbc7 :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_sbc7
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_ab7y
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7z [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7z
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep_sbc7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7x [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7x
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7y $krep_ab7z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc8 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Leaf_sbc8 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Leaf_sbc9 :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Leaf_sbc9 = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Leaf_sbc8

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      $tc'Leaf_sbc9
      1#
      $krep_ab7x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7B [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7B
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7z

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep_ab7A [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$krep_ab7A
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_ab7z $krep_ab7B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbca :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
$tc'Node_sbca = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Node_sbcb :: ghc-prim-0.7.0:GHC.Types.TrName
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
$tc'Node_sbcb = ghc-prim-0.7.0:GHC.Types.TrNameS $tc'Node_sbca

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[LclIdX,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      $tc'Node_sbcb
      1#
      $krep_ab7A

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ds_sbec :: ghc-prim-0.7.0:GHC.Prim.Addr#
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_sbec = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ds_db8p :: [Char]
[LclId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
ds_db8p = ghc-prim-0.7.0:GHC.CString.unpackCString# ds_sbec

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
lvl_sbdc :: Int -> [Char]
[LclId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
                 }
                 }}]
lvl_sbdc
  = \ (x_X3 [Dmd=<S,1*U(U)>] :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm [Dmd=<L,1*U>] #) ->
      GHC.Base.++_$s++ @Char ds_db8p ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc x_ib8n}]
makeImportant
  = \ (x_ib8n [Dmd=<S,1*U>] :: Tree Int) ->
      mapTree @Int @[Char] lvl_sbdc x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[LclIdX,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] lvl_sbdc ts_aaiP}]
makeImportantFused = makeImportant


------ Local rules for imported ids --------
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b_ab74)
           (f_aaiR :: b_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b_ab74).
      . @(Tree b_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b_ab74 @b_ab72 f_aaiR)
        (mapTree @a_ab71 @b_ab74 g_aaiS)
      = mapTree @a_ab71 @b_ab72 (. @b_ab74 @b_ab72 @a_ab71 f_aaiR g_aaiS)



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 253, types: 214, coercions: 0, joins: 0/3}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_rb8f :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
f_rb8f = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_rbfS :: [Char]
[GblId]
f1_rbfS = ghc-prim-0.7.0:GHC.CString.unpackCString# f_rb8f

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_rbfT :: Int
[GblId, Unf=OtherCon []]
lvl_rbfT = ghc-prim-0.7.0:GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f2_rbfU :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
f2_rbfU = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f3_rbfV :: [Char]
[GblId]
f3_rbfV = ghc-prim-0.7.0:GHC.CString.unpackCString# f2_rbfU

Rec {
-- RHS size: {terms: 69, types: 39, coercions: 0, joins: 0/3}
Tree.$w$cshowsPrec [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     Show a =>
     ghc-prim-0.7.0:GHC.Prim.Int# -> Tree a -> ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=OtherCon []]
Tree.$w$cshowsPrec
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (ww_sbf5 :: ghc-prim-0.7.0:GHC.Prim.Int#)
      (w1_sbf2 :: Tree a_sbeZ) ->
      case w1_sbf2 of {
        Leaf b1_ab4R ->
          let {
            g_sbcG [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcG = showsPrec @a_sbeZ w_sbf0 lvl_rbfT b1_ab4R } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT -> \ (x_X2 :: String) -> ++ @Char f3_rbfV (g_sbcG x_X2);
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f3_rbfV
                     (g_sbcG
                        (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))
          };
        Node b1_ab4T b2_ab4U ->
          let {
            f4_sbcM [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            f4_sbcM = Tree.$w$cshowsPrec @a_sbeZ w_sbf0 11# b1_ab4T } in
          let {
            g_sbcL [Dmd=<L,C(U)>] :: String -> String
            [LclId]
            g_sbcL = Tree.$w$cshowsPrec @a_sbeZ w_sbf0 11# b2_ab4U } in
          case ghc-prim-0.7.0:GHC.Prim.>=# ww_sbf5 11# of {
            __DEFAULT ->
              \ (x_X7 :: String) ->
                ++
                  @Char
                  f1_rbfS
                  (f4_sbcM
                     (ghc-prim-0.7.0:GHC.Types.:
                        @Char GHC.Show.showSpace1 (g_sbcL x_X7)));
            1# ->
              \ (x_ib8v :: String) ->
                ghc-prim-0.7.0:GHC.Types.:
                  @Char
                  GHC.Show.$fShow(,)4
                  (++
                     @Char
                     f1_rbfS
                     (f4_sbcM
                        (ghc-prim-0.7.0:GHC.Types.:
                           @Char
                           GHC.Show.showSpace1
                           (g_sbcL
                              (ghc-prim-0.7.0:GHC.Types.: @Char GHC.Show.$fShow(,)2 x_ib8v)))))
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshowsPrec [InlPrag=NOUSERINLINE[2]]
  :: forall a. Show a => Int -> Tree a -> ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_sbeZ)
                 (w_sbf0 [Occ=Once1] :: Show a_sbeZ)
                 (w1_sbf1 [Occ=Once1!] :: Int)
                 (w2_sbf2 [Occ=Once1] :: Tree a_sbeZ) ->
                 case w1_sbf1 of
                 { ghc-prim-0.7.0:GHC.Types.I# ww1_sbf5 [Occ=Once1] ->
                 Tree.$w$cshowsPrec @a_sbeZ w_sbf0 ww1_sbf5 w2_sbf2
                 }}]
Tree.$fShowTree_$cshowsPrec
  = \ (@a_sbeZ)
      (w_sbf0 :: Show a_sbeZ)
      (w1_sbf1 :: Int)
      (w2_sbf2 :: Tree a_sbeZ) ->
      case w1_sbf1 of { ghc-prim-0.7.0:GHC.Types.I# ww1_sbf5 ->
      Tree.$w$cshowsPrec @a_sbeZ w_sbf0 ww1_sbf5 w2_sbf2
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$fShowTree1 :: Int
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$fShowTree1 = ghc-prim-0.7.0:GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshow :: forall a. Show a => Tree a -> String
[GblId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (x_ib8A [Occ=Once1] :: Tree a_ab62) ->
                 Tree.$fShowTree_$cshowsPrec
                   @a_ab62
                   $dShow_ab63
                   Tree.$fShowTree1
                   x_ib8A
                   (ghc-prim-0.7.0:GHC.Types.[] @Char)}]
Tree.$fShowTree_$cshow
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (x_ib8A :: Tree a_ab62) ->
      Tree.$w$cshowsPrec
        @a_ab62 $dShow_ab63 0# x_ib8A (ghc-prim-0.7.0:GHC.Types.[] @Char)

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshowList :: forall a. Show a => [Tree a] -> ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_ab62)
                 ($dShow_ab63 [Occ=Once1] :: Show a_ab62)
                 (ls_ib8D [Occ=Once1] :: [Tree a_ab62])
                 (s_ib8E [Occ=Once1] :: String) ->
                 GHC.Show.showList__
                   @(Tree a_ab62)
                   (Tree.$fShowTree_$cshowsPrec @a_ab62 $dShow_ab63 Tree.$fShowTree1)
                   ls_ib8D
                   s_ib8E}]
Tree.$fShowTree_$cshowList
  = \ (@a_ab62)
      ($dShow_ab63 :: Show a_ab62)
      (ls_ib8D :: [Tree a_ab62])
      (s_ib8E :: String) ->
      GHC.Show.showList__
        @(Tree a_ab62)
        (\ (w_sbf2 :: Tree a_ab62) ->
           Tree.$w$cshowsPrec @a_ab62 $dShow_ab63 0# w_sbf2)
        ls_ib8D
        s_ib8E

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Show a => Show (Tree a)
[GblId[DFunId],
 Arity=1,
 Str=<L,U(C(C1(C(U))),A,A)>,
 Cpr=m1,
 Unf=DFun: \ (@a_aa5j) (v_B1 :: Show a_aa5j) ->
       GHC.Show.C:Show TYPE: Tree a_aa5j
                       Tree.$fShowTree_$cshowsPrec @a_aa5j v_B1
                       Tree.$fShowTree_$cshow @a_aa5j v_B1
                       Tree.$fShowTree_$cshowList @a_aa5j v_B1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_ab63 :: Show a_ab62) ->
      GHC.Show.C:Show
        @(Tree a_ab62)
        (Tree.$fShowTree_$cshowsPrec @a_ab62 $dShow_ab63)
        (Tree.$fShowTree_$cshow @a_ab62 $dShow_ab63)
        (Tree.$fShowTree_$cshowList @a_ab62 $dShow_ab63)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rbfW :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
lvl1_rbfW = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_rbfX :: [Char]
[GblId]
lvl2_rbfX = ghc-prim-0.7.0:GHC.CString.unpackCString# lvl1_rbfW

Rec {
-- RHS size: {terms: 20, types: 22, coercions: 0, joins: 0/0}
mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree a -> Tree b
[GblId, Arity=2, Str=<L,C(U)><S,1*U>, Unf=OtherCon []]
mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f4_aaiK :: a_ab5r -> b_ab5s)
      (ds_db7E :: Tree a_ab5r) ->
      case ds_db7E of {
        Leaf x_aaiL ->
          Tree.Leaf @b_ab5s (f4_aaiK (trace @a_ab5r lvl2_rbfX x_aaiL));
        Node lhs_aaiN rhs_aaiO ->
          Tree.Node
            @b_ab5s
            (mapTree @a_ab5r @b_ab5s f4_aaiK lhs_aaiN)
            (mapTree @a_ab5r @b_ab5s f4_aaiK rhs_aaiO)
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule4 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Tree.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule3 :: ghc-prim-0.7.0:GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule3 = ghc-prim-0.7.0:GHC.Types.TrNameS Tree.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule2 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Tree.$trModule2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule1 :: ghc-prim-0.7.0:GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule1 = ghc-prim-0.7.0:GHC.Types.TrNameS Tree.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: ghc-prim-0.7.0:GHC.Types.Module
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$trModule
  = ghc-prim-0.7.0:GHC.Types.Module Tree.$trModule3 Tree.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_rbfY :: ghc-prim-0.7.0:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_rbfY = ghc-prim-0.7.0:GHC.Types.KindRepVar 0#

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: ghc-prim-0.7.0:GHC.Types.TyCon
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tcTree
  = ghc-prim-0.7.0:GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      Tree.$trModule1
      0#
      ghc-prim-0.7.0:GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_rbfZ :: [ghc-prim-0.7.0:GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep1_rbfZ
  = ghc-prim-0.7.0:GHC.Types.:
      @ghc-prim-0.7.0:GHC.Types.KindRep
      $krep_rbfY
      (ghc-prim-0.7.0:GHC.Types.[] @ghc-prim-0.7.0:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_rbg0 :: ghc-prim-0.7.0:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_rbg0
  = ghc-prim-0.7.0:GHC.Types.KindRepTyConApp Tree.$tcTree $krep1_rbfZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf1 [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf1
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep_rbfY $krep2_rbg0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf3 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Tree.$tc'Leaf3 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf2 :: ghc-prim-0.7.0:GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf2 = ghc-prim-0.7.0:GHC.Types.TrNameS Tree.$tc'Leaf3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: ghc-prim-0.7.0:GHC.Types.TyCon
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Leaf
  = ghc-prim-0.7.0:GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      Tree.$tc'Leaf2
      1#
      Tree.$tc'Leaf1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rbg1 :: ghc-prim-0.7.0:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_rbg1
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep2_rbg0 $krep2_rbg0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node1 [InlPrag=NOUSERINLINE[~]]
  :: ghc-prim-0.7.0:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Tree.$tc'Node1
  = ghc-prim-0.7.0:GHC.Types.KindRepFun $krep2_rbg0 $krep3_rbg1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node3 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Tree.$tc'Node3 = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node2 :: ghc-prim-0.7.0:GHC.Types.TrName
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node2 = ghc-prim-0.7.0:GHC.Types.TrNameS Tree.$tc'Node3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: ghc-prim-0.7.0:GHC.Types.TyCon
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
Tree.$tc'Node
  = ghc-prim-0.7.0:GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      Tree.$tc'Node2
      1#
      Tree.$tc'Node1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.makeImportant3 :: ghc-prim-0.7.0:GHC.Prim.Addr#
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Tree.makeImportant3 = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.makeImportant2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Tree.makeImportant2
  = ghc-prim-0.7.0:GHC.CString.unpackCString# Tree.makeImportant3

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
Tree.makeImportant1 :: Int -> [Char]
[GblId,
 Arity=1,
 Str=<S,1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_X3 [Occ=Once1!] :: Int) ->
                 case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf [Occ=Once1] ->
                 case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
                 { (# ww1_ibcl [Occ=Once1], ww2_ibcm [Occ=Once1] #) ->
                 GHC.Base.++_$s++ @Char Tree.makeImportant2 ww1_ibcl ww2_ibcm
                 }
                 }}]
Tree.makeImportant1
  = \ (x_X3 :: Int) ->
      case x_X3 of { ghc-prim-0.7.0:GHC.Types.I# n_ibcf ->
      case GHC.Show.$witos n_ibcf (ghc-prim-0.7.0:GHC.Types.[] @Char) of
      { (# ww1_ibcl, ww2_ibcm #) ->
      GHC.Base.++_$s++ @Char Tree.makeImportant2 ww1_ibcl ww2_ibcm
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
makeImportant :: Tree Int -> Tree String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_ib8n [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] Tree.makeImportant1 x_ib8n}]
makeImportant
  = \ (x_ib8n :: Tree Int) ->
      mapTree @Int @[Char] Tree.makeImportant1 x_ib8n

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeImportantFused :: Tree Int -> Tree String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ts_aaiP [Occ=Once1] :: Tree Int) ->
                 mapTree @Int @[Char] Tree.makeImportant1 ts_aaiP}]
makeImportantFused = makeImportant


------ Local rules for imported ids --------
"mapTree/mapTree2"
    forall (@b_ab7k)
           (@b1_ab7m)
           (@a_ab7j)
           (f4_aaiT :: b1_ab7m -> b_ab7k)
           (g_aaiU :: a_ab7j -> b1_ab7m)
           (t_aaiV :: Tree a_ab7j).
      mapTree @b1_ab7m
              @b_ab7k
              f4_aaiT
              (mapTree @a_ab7j @b1_ab7m g_aaiU t_aaiV)
      = mapTree
          @a_ab7j @b_ab7k (. @b1_ab7m @b_ab7k @a_ab7j f4_aaiT g_aaiU) t_aaiV
"mapTree/mapTree"
    forall (@a_ab71)
           (@b_ab72)
           (@b1_ab74)
           (f4_aaiR :: b1_ab74 -> b_ab72)
           (g_aaiS :: a_ab71 -> b1_ab74).
      . @(Tree b1_ab74)
        @(Tree b_ab72)
        @(Tree a_ab71)
        (mapTree @b1_ab74 @b_ab72 f4_aaiR)
        (mapTree @a_ab71 @b1_ab74 g_aaiS)
      = mapTree
          @a_ab71 @b_ab72 (. @b1_ab74 @b_ab72 @a_ab71 f4_aaiR g_aaiS)



==================== CorePrep ====================
Result size of CorePrep
  = {terms: 325, types: 299, coercions: 0, joins: 0/27}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_rb8f :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
f_rb8f = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_rbfS :: [GHC.Types.Char]
[GblId]
f1_rbfS = GHC.CString.unpackCString# f_rb8f

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_rbfT :: GHC.Types.Int
[GblId, Unf=OtherCon []]
lvl_rbfT = GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f2_rbfU :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
f2_rbfU = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f3_rbfV :: [GHC.Types.Char]
[GblId]
f3_rbfV = GHC.CString.unpackCString# f2_rbfU

Rec {
-- RHS size: {terms: 101, types: 69, coercions: 0, joins: 0/19}
Tree.$w$cshowsPrec [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> Tree.Tree a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=OtherCon []]
Tree.$w$cshowsPrec
  = \ (@a_sbeZ)
      (w_sbiz :: GHC.Show.Show a_sbeZ)
      (ww_sbiA [Occ=Once2] :: GHC.Prim.Int#)
      (w1_sbiB [Occ=Once1!] :: Tree.Tree a_sbeZ) ->
      case w1_sbiB of {
        Tree.Leaf b1_sbiD [Occ=Once1] ->
          let {
            g_sbiE [Occ=OnceL2!, Dmd=<L,C(U)>]
              :: GHC.Base.String -> GHC.Base.String
            [LclId]
            g_sbiE = GHC.Show.showsPrec @a_sbeZ w_sbiz lvl_rbfT b1_sbiD } in
          case GHC.Prim.>=# ww_sbiA 11# of {
            __DEFAULT ->
              let {
                sat_sbiI [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbiI
                  = \ (x_sbiG [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbiH [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                        [LclId]
                        sat_sbiH = g_sbiE x_sbiG } in
                      GHC.Base.++ @GHC.Types.Char f3_rbfV sat_sbiH } in
              sat_sbiI;
            1# ->
              let {
                sat_sbiN [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbiN
                  = \ (x_sbiJ [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbiM [Occ=Once1] :: [GHC.Types.Char]
                        [LclId]
                        sat_sbiM
                          = let {
                              sat_sbiL [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                              [LclId]
                              sat_sbiL
                                = let {
                                    sat_sbiK [Occ=Once1] :: [GHC.Types.Char]
                                    [LclId]
                                    sat_sbiK
                                      = GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)2 x_sbiJ } in
                                  g_sbiE sat_sbiK } in
                            GHC.Base.++ @GHC.Types.Char f3_rbfV sat_sbiL } in
                      GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)4 sat_sbiM } in
              sat_sbiN
          };
        Tree.Node b1_sbiO [Occ=Once1] b2_sbiP [Occ=Once1] ->
          let {
            f4_sbiQ [Occ=OnceL2!, Dmd=<L,C(U)>]
              :: GHC.Base.String -> GHC.Base.String
            [LclId]
            f4_sbiQ = Tree.$w$cshowsPrec @a_sbeZ w_sbiz 11# b1_sbiO } in
          let {
            g_sbiR [Occ=OnceL2!, Dmd=<L,C(U)>]
              :: GHC.Base.String -> GHC.Base.String
            [LclId]
            g_sbiR = Tree.$w$cshowsPrec @a_sbeZ w_sbiz 11# b2_sbiP } in
          case GHC.Prim.>=# ww_sbiA 11# of {
            __DEFAULT ->
              let {
                sat_sbiX [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbiX
                  = \ (x_sbiT [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbiW [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                        [LclId]
                        sat_sbiW
                          = let {
                              sat_sbiU [Occ=Once1] :: GHC.Base.String
                              [LclId]
                              sat_sbiU = g_sbiR x_sbiT } in
                            let {
                              sat_sbiV [Occ=Once1] :: [GHC.Types.Char]
                              [LclId]
                              sat_sbiV
                                = GHC.Types.: @GHC.Types.Char GHC.Show.showSpace1 sat_sbiU } in
                            f4_sbiQ sat_sbiV } in
                      GHC.Base.++ @GHC.Types.Char f1_rbfS sat_sbiW } in
              sat_sbiX;
            1# ->
              let {
                sat_sbj4 [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbj4
                  = \ (x_sbiY [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbj3 [Occ=Once1] :: [GHC.Types.Char]
                        [LclId]
                        sat_sbj3
                          = let {
                              sat_sbj2 [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                              [LclId]
                              sat_sbj2
                                = let {
                                    sat_sbj0 [Occ=Once1] :: GHC.Base.String
                                    [LclId]
                                    sat_sbj0
                                      = let {
                                          sat_sbiZ [Occ=Once1] :: [GHC.Types.Char]
                                          [LclId]
                                          sat_sbiZ
                                            = GHC.Types.:
                                                @GHC.Types.Char GHC.Show.$fShow(,)2 x_sbiY } in
                                        g_sbiR sat_sbiZ } in
                                  let {
                                    sat_sbj1 [Occ=Once1] :: [GHC.Types.Char]
                                    [LclId]
                                    sat_sbj1
                                      = GHC.Types.:
                                          @GHC.Types.Char GHC.Show.showSpace1 sat_sbj0 } in
                                  f4_sbiQ sat_sbj1 } in
                            GHC.Base.++ @GHC.Types.Char f1_rbfS sat_sbj2 } in
                      GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)4 sat_sbj3 } in
              sat_sbj4
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshowsPrec [InlPrag=NOUSERINLINE[2]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> Tree.Tree a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U(U)><S,1*U>,
 Unf=OtherCon []]
Tree.$fShowTree_$cshowsPrec
  = \ (@a_sbeZ)
      (w_sbj5 [Occ=Once1] :: GHC.Show.Show a_sbeZ)
      (w1_sbj6 [Occ=Once1!] :: GHC.Types.Int)
      (w2_sbj7 [Occ=Once1] :: Tree.Tree a_sbeZ) ->
      case w1_sbj6 of { GHC.Types.I# ww1_sbj9 [Occ=Once1] ->
      Tree.$w$cshowsPrec @a_sbeZ w_sbj5 ww1_sbj9 w2_sbj7
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$fShowTree1 :: GHC.Types.Int
[GblId, Unf=OtherCon []]
Tree.$fShowTree1 = GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshow
  :: forall a. GHC.Show.Show a => Tree.Tree a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=OtherCon []]
Tree.$fShowTree_$cshow
  = \ (@a_ab62)
      ($dShow_sbja [Occ=Once1] :: GHC.Show.Show a_ab62)
      (x_sbjb [Occ=Once1] :: Tree.Tree a_ab62) ->
      Tree.$w$cshowsPrec
        @a_ab62 $dShow_sbja 0# x_sbjb (GHC.Types.[] @GHC.Types.Char)

-- RHS size: {terms: 14, types: 16, coercions: 0, joins: 0/1}
Tree.$fShowTree_$cshowList
  :: forall a. GHC.Show.Show a => [Tree.Tree a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []]
Tree.$fShowTree_$cshowList
  = \ (@a_ab62)
      ($dShow_sbjc [Occ=OnceL1] :: GHC.Show.Show a_ab62)
      (ls_sbjd [Occ=Once1] :: [Tree.Tree a_ab62])
      (s_sbje [Occ=Once1] :: GHC.Base.String) ->
      let {
        sat_sbjg [Occ=Once1] :: Tree.Tree a_ab62 -> GHC.Show.ShowS
        [LclId]
        sat_sbjg
          = \ (w_sbjf [Occ=Once1] :: Tree.Tree a_ab62) ->
              Tree.$w$cshowsPrec @a_ab62 $dShow_sbjc 0# w_sbjf } in
      GHC.Show.showList__ @(Tree.Tree a_ab62) sat_sbjg ls_sbjd s_sbje

-- RHS size: {terms: 25, types: 29, coercions: 0, joins: 0/3}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (Tree.Tree a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>, Cpr=m1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_sbjh :: GHC.Show.Show a_ab62) ->
      let {
        sat_sbjk [Occ=Once1] :: [Tree.Tree a_ab62] -> GHC.Show.ShowS
        [LclId]
        sat_sbjk
          = \ (eta_B0 [Occ=Once1] :: [Tree.Tree a_ab62])
              (eta_B1 [Occ=Once1] :: GHC.Base.String) ->
              Tree.$fShowTree_$cshowList @a_ab62 $dShow_sbjh eta_B0 eta_B1 } in
      let {
        sat_sbjj [Occ=Once1] :: Tree.Tree a_ab62 -> GHC.Base.String
        [LclId]
        sat_sbjj
          = \ (eta_B0 [Occ=Once1] :: Tree.Tree a_ab62) ->
              Tree.$fShowTree_$cshow @a_ab62 $dShow_sbjh eta_B0 } in
      let {
        sat_sbji [Occ=Once1]
          :: GHC.Types.Int -> Tree.Tree a_ab62 -> GHC.Show.ShowS
        [LclId]
        sat_sbji
          = \ (eta_B0 [Occ=Once1] :: GHC.Types.Int)
              (eta_B1 [Occ=Once1] :: Tree.Tree a_ab62) ->
              Tree.$fShowTree_$cshowsPrec @a_ab62 $dShow_sbjh eta_B0 eta_B1 } in
      GHC.Show.C:Show @(Tree.Tree a_ab62) sat_sbji sat_sbjj sat_sbjk

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rbfW :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
lvl1_rbfW = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_rbfX :: [GHC.Types.Char]
[GblId]
lvl2_rbfX = GHC.CString.unpackCString# lvl1_rbfW

Rec {
-- RHS size: {terms: 28, types: 28, coercions: 0, joins: 0/4}
Tree.mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree.Tree a -> Tree.Tree b
[GblId, Arity=2, Str=<L,C(U)><S,1*U>, Unf=OtherCon []]
Tree.mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f4_sbjl :: a_ab5r -> b_ab5s)
      (ds_sbjm [Occ=Once1!] :: Tree.Tree a_ab5r) ->
      case ds_sbjm of {
        Tree.Leaf x_sbjo [Occ=Once1] ->
          let {
            sat_sbjq [Occ=Once1] :: b_ab5s
            [LclId]
            sat_sbjq
              = let {
                  sat_sbjp [Occ=Once1] :: a_ab5r
                  [LclId]
                  sat_sbjp = Debug.Trace.trace @a_ab5r lvl2_rbfX x_sbjo } in
                f4_sbjl sat_sbjp } in
          Tree.Leaf @b_ab5s sat_sbjq;
        Tree.Node lhs_sbjr [Occ=Once1] rhs_sbjs [Occ=Once1] ->
          let {
            sat_sbju [Occ=Once1] :: Tree.Tree b_ab5s
            [LclId]
            sat_sbju = Tree.mapTree @a_ab5r @b_ab5s f4_sbjl rhs_sbjs } in
          let {
            sat_sbjt [Occ=Once1] :: Tree.Tree b_ab5s
            [LclId]
            sat_sbjt = Tree.mapTree @a_ab5r @b_ab5s f4_sbjl lhs_sbjr } in
          Tree.Node @b_ab5s sat_sbjt sat_sbju
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule4 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule3 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$trModule3 = GHC.Types.TrNameS Tree.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule2 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$trModule2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule1 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$trModule1 = GHC.Types.TrNameS Tree.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: GHC.Types.Module
[GblId, Unf=OtherCon []]
Tree.$trModule = GHC.Types.Module Tree.$trModule3 Tree.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_rbfY :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_rbfY = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Tree.$tcTree
  = GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      Tree.$trModule1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_rbfZ :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep1_rbfZ
  = GHC.Types.:
      @GHC.Types.KindRep $krep_rbfY (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_rbg0 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_rbg0 = GHC.Types.KindRepTyConApp Tree.$tcTree $krep1_rbfZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf1 = GHC.Types.KindRepFun $krep_rbfY $krep2_rbg0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf3 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf2 = GHC.Types.TrNameS Tree.$tc'Leaf3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf
  = GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      Tree.$tc'Leaf2
      1#
      Tree.$tc'Leaf1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rbg1 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_rbg1 = GHC.Types.KindRepFun $krep2_rbg0 $krep2_rbg0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Tree.$tc'Node1 = GHC.Types.KindRepFun $krep2_rbg0 $krep3_rbg1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$tc'Node3 = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$tc'Node2 = GHC.Types.TrNameS Tree.$tc'Node3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Tree.$tc'Node
  = GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      Tree.$tc'Node2
      1#
      Tree.$tc'Node1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.makeImportant3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.makeImportant3 = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.makeImportant2 :: [GHC.Types.Char]
[GblId]
Tree.makeImportant2
  = GHC.CString.unpackCString# Tree.makeImportant3

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
Tree.makeImportant1 :: GHC.Types.Int -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U(U)>, Unf=OtherCon []]
Tree.makeImportant1
  = \ (x_sbjv [Occ=Once1!] :: GHC.Types.Int) ->
      case x_sbjv of { GHC.Types.I# n_sbjx [Occ=Once1] ->
      case GHC.Show.$witos n_sbjx (GHC.Types.[] @GHC.Types.Char) of
      { (# ww1_sbjz [Occ=Once1], ww2_sbjA [Occ=Once1] #) ->
      GHC.Base.++_$s++
        @GHC.Types.Char Tree.makeImportant2 ww1_sbjz ww2_sbjA
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Tree.makeImportant
  :: Tree.Tree GHC.Types.Int -> Tree.Tree GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
Tree.makeImportant
  = \ (x_sbjB [Occ=Once1] :: Tree.Tree GHC.Types.Int) ->
      Tree.mapTree
        @GHC.Types.Int @[GHC.Types.Char] Tree.makeImportant1 x_sbjB

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Tree.makeImportantFused
  :: Tree.Tree GHC.Types.Int -> Tree.Tree GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
Tree.makeImportantFused
  = \ (eta_B0 [Occ=Once1] :: Tree.Tree GHC.Types.Int) ->
      Tree.makeImportant eta_B0

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Tree.Leaf [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. a %1 -> Tree.Tree a
[GblId[DataCon], Arity=1, Caf=NoCafRefs, Cpr=m1, Unf=OtherCon []]
Tree.Leaf
  = \ (@a_aa5j) (eta_B0 [Occ=Once1] :: a_aa5j) ->
      Tree.Leaf @a_aa5j eta_B0

-- RHS size: {terms: 6, types: 7, coercions: 0, joins: 0/0}
Tree.Node [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Tree.Tree a %1 -> Tree.Tree a %1 -> Tree.Tree a
[GblId[DataCon], Arity=2, Caf=NoCafRefs, Cpr=m2, Unf=OtherCon []]
Tree.Node
  = \ (@a_aa5j)
      (eta_B0 [Occ=Once1] :: Tree.Tree a_aa5j)
      (eta_B1 [Occ=Once1] :: Tree.Tree a_aa5j) ->
      Tree.Node @a_aa5j eta_B0 eta_B1




==================== CorePrep ====================
Result size of CorePrep
  = {terms: 325, types: 299, coercions: 0, joins: 0/27}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_rb8f :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
f_rb8f = "Node "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_rbfS :: [GHC.Types.Char]
[GblId]
f1_rbfS = GHC.CString.unpackCString# f_rb8f

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_rbfT :: GHC.Types.Int
[GblId, Unf=OtherCon []]
lvl_rbfT = GHC.Types.I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f2_rbfU :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
f2_rbfU = "Leaf "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f3_rbfV :: [GHC.Types.Char]
[GblId]
f3_rbfV = GHC.CString.unpackCString# f2_rbfU

Rec {
-- RHS size: {terms: 101, types: 69, coercions: 0, joins: 0/19}
Tree.$w$cshowsPrec [InlPrag=NOUSERINLINE[2], Occ=LoopBreaker]
  :: forall {a}.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> Tree.Tree a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><L,U><S,1*U>,
 Unf=OtherCon []]
Tree.$w$cshowsPrec
  = \ (@a_sbeZ)
      (w_sbso :: GHC.Show.Show a_sbeZ)
      (ww_sbsp [Occ=Once2] :: GHC.Prim.Int#)
      (w1_sbsq [Occ=Once1!] :: Tree.Tree a_sbeZ) ->
      case w1_sbsq of {
        Tree.Leaf b1_sbss [Occ=Once1] ->
          let {
            g_sbst [Occ=OnceL2!, Dmd=<L,C(U)>]
              :: GHC.Base.String -> GHC.Base.String
            [LclId]
            g_sbst = GHC.Show.showsPrec @a_sbeZ w_sbso lvl_rbfT b1_sbss } in
          case GHC.Prim.>=# ww_sbsp 11# of {
            __DEFAULT ->
              let {
                sat_sbsx [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbsx
                  = \ (x_sbsv [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbsw [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                        [LclId]
                        sat_sbsw = g_sbst x_sbsv } in
                      GHC.Base.++ @GHC.Types.Char f3_rbfV sat_sbsw } in
              sat_sbsx;
            1# ->
              let {
                sat_sbsC [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbsC
                  = \ (x_sbsy [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbsB [Occ=Once1] :: [GHC.Types.Char]
                        [LclId]
                        sat_sbsB
                          = let {
                              sat_sbsA [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                              [LclId]
                              sat_sbsA
                                = let {
                                    sat_sbsz [Occ=Once1] :: [GHC.Types.Char]
                                    [LclId]
                                    sat_sbsz
                                      = GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)2 x_sbsy } in
                                  g_sbst sat_sbsz } in
                            GHC.Base.++ @GHC.Types.Char f3_rbfV sat_sbsA } in
                      GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)4 sat_sbsB } in
              sat_sbsC
          };
        Tree.Node b1_sbsD [Occ=Once1] b2_sbsE [Occ=Once1] ->
          let {
            f4_sbsF [Occ=OnceL2!, Dmd=<L,C(U)>]
              :: GHC.Base.String -> GHC.Base.String
            [LclId]
            f4_sbsF = Tree.$w$cshowsPrec @a_sbeZ w_sbso 11# b1_sbsD } in
          let {
            g_sbsG [Occ=OnceL2!, Dmd=<L,C(U)>]
              :: GHC.Base.String -> GHC.Base.String
            [LclId]
            g_sbsG = Tree.$w$cshowsPrec @a_sbeZ w_sbso 11# b2_sbsE } in
          case GHC.Prim.>=# ww_sbsp 11# of {
            __DEFAULT ->
              let {
                sat_sbsM [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbsM
                  = \ (x_sbsI [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbsL [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                        [LclId]
                        sat_sbsL
                          = let {
                              sat_sbsJ [Occ=Once1] :: GHC.Base.String
                              [LclId]
                              sat_sbsJ = g_sbsG x_sbsI } in
                            let {
                              sat_sbsK [Occ=Once1] :: [GHC.Types.Char]
                              [LclId]
                              sat_sbsK
                                = GHC.Types.: @GHC.Types.Char GHC.Show.showSpace1 sat_sbsJ } in
                            f4_sbsF sat_sbsK } in
                      GHC.Base.++ @GHC.Types.Char f1_rbfS sat_sbsL } in
              sat_sbsM;
            1# ->
              let {
                sat_sbsT [Occ=Once1T[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId]
                sat_sbsT
                  = \ (x_sbsN [Occ=Once1] :: GHC.Base.String) ->
                      let {
                        sat_sbsS [Occ=Once1] :: [GHC.Types.Char]
                        [LclId]
                        sat_sbsS
                          = let {
                              sat_sbsR [Occ=Once1, Dmd=<L,1*U>] :: GHC.Base.String
                              [LclId]
                              sat_sbsR
                                = let {
                                    sat_sbsP [Occ=Once1] :: GHC.Base.String
                                    [LclId]
                                    sat_sbsP
                                      = let {
                                          sat_sbsO [Occ=Once1] :: [GHC.Types.Char]
                                          [LclId]
                                          sat_sbsO
                                            = GHC.Types.:
                                                @GHC.Types.Char GHC.Show.$fShow(,)2 x_sbsN } in
                                        g_sbsG sat_sbsO } in
                                  let {
                                    sat_sbsQ [Occ=Once1] :: [GHC.Types.Char]
                                    [LclId]
                                    sat_sbsQ
                                      = GHC.Types.:
                                          @GHC.Types.Char GHC.Show.showSpace1 sat_sbsP } in
                                  f4_sbsF sat_sbsQ } in
                            GHC.Base.++ @GHC.Types.Char f1_rbfS sat_sbsR } in
                      GHC.Types.: @GHC.Types.Char GHC.Show.$fShow(,)4 sat_sbsS } in
              sat_sbsT
          }
      }
end Rec }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshowsPrec [InlPrag=NOUSERINLINE[2]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> Tree.Tree a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U(U)><S,1*U>,
 Unf=OtherCon []]
Tree.$fShowTree_$cshowsPrec
  = \ (@a_sbeZ)
      (w_sbsU [Occ=Once1] :: GHC.Show.Show a_sbeZ)
      (w1_sbsV [Occ=Once1!] :: GHC.Types.Int)
      (w2_sbsW [Occ=Once1] :: Tree.Tree a_sbeZ) ->
      case w1_sbsV of { GHC.Types.I# ww1_sbsY [Occ=Once1] ->
      Tree.$w$cshowsPrec @a_sbeZ w_sbsU ww1_sbsY w2_sbsW
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$fShowTree1 :: GHC.Types.Int
[GblId, Unf=OtherCon []]
Tree.$fShowTree1 = GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
Tree.$fShowTree_$cshow
  :: forall a. GHC.Show.Show a => Tree.Tree a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U>,
 Unf=OtherCon []]
Tree.$fShowTree_$cshow
  = \ (@a_ab62)
      ($dShow_sbsZ [Occ=Once1] :: GHC.Show.Show a_ab62)
      (x_sbt0 [Occ=Once1] :: Tree.Tree a_ab62) ->
      Tree.$w$cshowsPrec
        @a_ab62 $dShow_sbsZ 0# x_sbt0 (GHC.Types.[] @GHC.Types.Char)

-- RHS size: {terms: 14, types: 16, coercions: 0, joins: 0/1}
Tree.$fShowTree_$cshowList
  :: forall a. GHC.Show.Show a => [Tree.Tree a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []]
Tree.$fShowTree_$cshowList
  = \ (@a_ab62)
      ($dShow_sbt1 [Occ=OnceL1] :: GHC.Show.Show a_ab62)
      (ls_sbt2 [Occ=Once1] :: [Tree.Tree a_ab62])
      (s_sbt3 [Occ=Once1] :: GHC.Base.String) ->
      let {
        sat_sbt5 [Occ=Once1] :: Tree.Tree a_ab62 -> GHC.Show.ShowS
        [LclId]
        sat_sbt5
          = \ (w_sbt4 [Occ=Once1] :: Tree.Tree a_ab62) ->
              Tree.$w$cshowsPrec @a_ab62 $dShow_sbt1 0# w_sbt4 } in
      GHC.Show.showList__ @(Tree.Tree a_ab62) sat_sbt5 ls_sbt2 s_sbt3

-- RHS size: {terms: 25, types: 29, coercions: 0, joins: 0/3}
Tree.$fShowTree [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (Tree.Tree a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>, Cpr=m1]
Tree.$fShowTree
  = \ (@a_ab62) ($dShow_sbt6 :: GHC.Show.Show a_ab62) ->
      let {
        sat_sbt9 [Occ=Once1] :: [Tree.Tree a_ab62] -> GHC.Show.ShowS
        [LclId]
        sat_sbt9
          = \ (eta_B0 [Occ=Once1] :: [Tree.Tree a_ab62])
              (eta_B1 [Occ=Once1] :: GHC.Base.String) ->
              Tree.$fShowTree_$cshowList @a_ab62 $dShow_sbt6 eta_B0 eta_B1 } in
      let {
        sat_sbt8 [Occ=Once1] :: Tree.Tree a_ab62 -> GHC.Base.String
        [LclId]
        sat_sbt8
          = \ (eta_B0 [Occ=Once1] :: Tree.Tree a_ab62) ->
              Tree.$fShowTree_$cshow @a_ab62 $dShow_sbt6 eta_B0 } in
      let {
        sat_sbt7 [Occ=Once1]
          :: GHC.Types.Int -> Tree.Tree a_ab62 -> GHC.Show.ShowS
        [LclId]
        sat_sbt7
          = \ (eta_B0 [Occ=Once1] :: GHC.Types.Int)
              (eta_B1 [Occ=Once1] :: Tree.Tree a_ab62) ->
              Tree.$fShowTree_$cshowsPrec @a_ab62 $dShow_sbt6 eta_B0 eta_B1 } in
      GHC.Show.C:Show @(Tree.Tree a_ab62) sat_sbt7 sat_sbt8 sat_sbt9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rbfW :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
lvl1_rbfW = "ping"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_rbfX :: [GHC.Types.Char]
[GblId]
lvl2_rbfX = GHC.CString.unpackCString# lvl1_rbfW

Rec {
-- RHS size: {terms: 28, types: 28, coercions: 0, joins: 0/4}
Tree.mapTree [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: forall a b. (a -> b) -> Tree.Tree a -> Tree.Tree b
[GblId, Arity=2, Str=<L,C(U)><S,1*U>, Unf=OtherCon []]
Tree.mapTree
  = \ (@a_ab5r)
      (@b_ab5s)
      (f4_sbta :: a_ab5r -> b_ab5s)
      (ds_sbtb [Occ=Once1!] :: Tree.Tree a_ab5r) ->
      case ds_sbtb of {
        Tree.Leaf x_sbtd [Occ=Once1] ->
          let {
            sat_sbtf [Occ=Once1] :: b_ab5s
            [LclId]
            sat_sbtf
              = let {
                  sat_sbte [Occ=Once1] :: a_ab5r
                  [LclId]
                  sat_sbte = Debug.Trace.trace @a_ab5r lvl2_rbfX x_sbtd } in
                f4_sbta sat_sbte } in
          Tree.Leaf @b_ab5s sat_sbtf;
        Tree.Node lhs_sbtg [Occ=Once1] rhs_sbth [Occ=Once1] ->
          let {
            sat_sbtj [Occ=Once1] :: Tree.Tree b_ab5s
            [LclId]
            sat_sbtj = Tree.mapTree @a_ab5r @b_ab5s f4_sbta rhs_sbth } in
          let {
            sat_sbti [Occ=Once1] :: Tree.Tree b_ab5s
            [LclId]
            sat_sbti = Tree.mapTree @a_ab5r @b_ab5s f4_sbta lhs_sbtg } in
          Tree.Node @b_ab5s sat_sbti sat_sbtj
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule4 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule3 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$trModule3 = GHC.Types.TrNameS Tree.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule2 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$trModule2 = "Tree"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule1 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$trModule1 = GHC.Types.TrNameS Tree.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$trModule :: GHC.Types.Module
[GblId, Unf=OtherCon []]
Tree.$trModule = GHC.Types.Module Tree.$trModule3 Tree.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_rbfY :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_rbfY = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tcTree :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Tree.$tcTree
  = GHC.Types.TyCon
      5231059604105679274##
      6220449931489177611##
      Tree.$trModule
      Tree.$trModule1
      0#
      GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_rbfZ :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep1_rbfZ
  = GHC.Types.:
      @GHC.Types.KindRep $krep_rbfY (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_rbg0 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_rbg0 = GHC.Types.KindRepTyConApp Tree.$tcTree $krep1_rbfZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf1 = GHC.Types.KindRepFun $krep_rbfY $krep2_rbg0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf3 = "'Leaf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf2 = GHC.Types.TrNameS Tree.$tc'Leaf3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Leaf :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Tree.$tc'Leaf
  = GHC.Types.TyCon
      15138644471640663979##
      5854595432479681672##
      Tree.$trModule
      Tree.$tc'Leaf2
      1#
      Tree.$tc'Leaf1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rbg1 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_rbg1 = GHC.Types.KindRepFun $krep2_rbg0 $krep2_rbg0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
Tree.$tc'Node1 = GHC.Types.KindRepFun $krep2_rbg0 $krep3_rbg1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.$tc'Node3 = "'Node"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node2 :: GHC.Types.TrName
[GblId, Unf=OtherCon []]
Tree.$tc'Node2 = GHC.Types.TrNameS Tree.$tc'Node3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Tree.$tc'Node :: GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Tree.$tc'Node
  = GHC.Types.TyCon
      7659270607683559359##
      17945912111261282221##
      Tree.$trModule
      Tree.$tc'Node2
      1#
      Tree.$tc'Node1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Tree.makeImportant3 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
Tree.makeImportant3 = "!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Tree.makeImportant2 :: [GHC.Types.Char]
[GblId]
Tree.makeImportant2
  = GHC.CString.unpackCString# Tree.makeImportant3

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
Tree.makeImportant1 :: GHC.Types.Int -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U(U)>, Unf=OtherCon []]
Tree.makeImportant1
  = \ (x_sbtk [Occ=Once1!] :: GHC.Types.Int) ->
      case x_sbtk of { GHC.Types.I# n_sbtm [Occ=Once1] ->
      case GHC.Show.$witos n_sbtm (GHC.Types.[] @GHC.Types.Char) of
      { (# ww1_sbto [Occ=Once1], ww2_sbtp [Occ=Once1] #) ->
      GHC.Base.++_$s++
        @GHC.Types.Char Tree.makeImportant2 ww1_sbto ww2_sbtp
      }
      }

-- RHS size: {terms: 4, types: 5, coercions: 0, joins: 0/0}
Tree.makeImportant
  :: Tree.Tree GHC.Types.Int -> Tree.Tree GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
Tree.makeImportant
  = \ (x_sbtq [Occ=Once1] :: Tree.Tree GHC.Types.Int) ->
      Tree.mapTree
        @GHC.Types.Int @[GHC.Types.Char] Tree.makeImportant1 x_sbtq

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Tree.makeImportantFused
  :: Tree.Tree GHC.Types.Int -> Tree.Tree GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
Tree.makeImportantFused
  = \ (eta_B0 [Occ=Once1] :: Tree.Tree GHC.Types.Int) ->
      Tree.makeImportant eta_B0

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
Tree.Leaf [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. a %1 -> Tree.Tree a
[GblId[DataCon], Arity=1, Caf=NoCafRefs, Cpr=m1, Unf=OtherCon []]
Tree.Leaf
  = \ (@a_aa5j) (eta_B0 [Occ=Once1] :: a_aa5j) ->
      Tree.Leaf @a_aa5j eta_B0

-- RHS size: {terms: 6, types: 7, coercions: 0, joins: 0/0}
Tree.Node [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. Tree.Tree a %1 -> Tree.Tree a %1 -> Tree.Tree a
[GblId[DataCon], Arity=2, Caf=NoCafRefs, Cpr=m2, Unf=OtherCon []]
Tree.Node
  = \ (@a_aa5j)
      (eta_B0 [Occ=Once1] :: Tree.Tree a_aa5j)
      (eta_B1 [Occ=Once1] :: Tree.Tree a_aa5j) ->
      Tree.Node @a_aa5j eta_B0 eta_B1



[10 of 11] Skipping  InspectionTests  ( app/InspectionTests.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/InspectionTests.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/InspectionTests.dyn_o )
[11 of 11] Skipping  Main             ( app/Main.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Main.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Main.dyn_o )
[ 1 of 11] Skipping  Channable        ( app/Channable.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Channable.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Channable.dyn_o )
[ 2 of 11] Skipping  Factorial        ( app/Factorial.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Factorial.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Factorial.dyn_o )
[ 3 of 11] Skipping  Peano            ( app/Peano.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Peano.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Peano.dyn_o )
[ 4 of 11] Skipping  Quicksort        ( app/Quicksort.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Quicksort.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Quicksort.dyn_o )
[ 5 of 11] Skipping  Streaming        ( app/Streaming.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Streaming.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Streaming.dyn_o )
[ 6 of 11] Skipping  Text             ( app/Text.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Text.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Text.dyn_o )
[ 7 of 11] Skipping  Tree             ( app/Tree.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Tree.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Tree.dyn_o )
[ 8 of 11] Skipping  InspectionTests  ( app/InspectionTests.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/InspectionTests.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/InspectionTests.dyn_o )
[ 9 of 11] Skipping  Typeclass        ( app/Typeclass.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Typeclass.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Typeclass.dyn_o )
[10 of 11] Skipping  Unlines          ( app/Unlines.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Unlines.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Unlines.dyn_o )
[11 of 11] Skipping  Main             ( app/Main.hs, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Main.o, /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test-tmp/Main.dyn_o )
Linking /home/hugo/repos/hs-comprehension/test-project/dist-newstyle/build/x86_64-linux/ghc-9.0.2/test-project-0.1.0.0/x/hs-plugin-test/build/hs-plugin-test/hs-plugin-test ...
